/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using VideoApiClient.Client;
using VideoApiClient.Model;

namespace VideoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ChaptersApi
    {
        /// <summary>
        /// Api Client Instance
        /// </summary>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="ChaptersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChaptersApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Delete a chapter 
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want to delete a chapter from. </param>
        /// <param name="language">A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.</param>
        /// <returns></returns>
		public void delete(string videoId, string language)
        {
             deleteWithHttpInfo(videoId, language);
        }

        /// <summary>
        /// Delete a chapter 
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want to delete a chapter from. </param>
        /// <param name="language">A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> deleteWithHttpInfo(string videoId, string language)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling ChaptersApi->delete");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling ChaptersApi->delete");

            var localVarPath = "/videos/{videoId}/chapters/{language}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (language != null) localVarPathParams.Add("language", this.ApiClient.ParameterToString(language)); // path parameter

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }
        /// <summary>
        /// List video chapters Retrieve a list of all chapters for a specified video.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want to retrieve a list of chapters for.</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>ChaptersListResponse</returns>
		public ChaptersListResponse list(string videoId, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<ChaptersListResponse> localVarResponse = listWithHttpInfo(videoId, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List video chapters Retrieve a list of all chapters for a specified video.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want to retrieve a list of chapters for.</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>ApiResponse of ChaptersListResponse</returns>
		public ApiResponse<ChaptersListResponse> listWithHttpInfo(string videoId, int? currentPage = default, int? pageSize = default)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling ChaptersApi->list");

            var localVarPath = "/videos/{videoId}/chapters";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<ChaptersListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ChaptersListResponse) this.ApiClient.Deserialize(localVarResponse, typeof(ChaptersListResponse)));
        }
        /// <summary>
        /// Show a chapter 
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want to show a chapter for.</param>
        /// <param name="language">A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.</param>
        /// <returns>Chapter</returns>
		public Chapter get(string videoId, string language)
        {
             ApiResponse<Chapter> localVarResponse = getWithHttpInfo(videoId, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show a chapter 
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want to show a chapter for.</param>
        /// <param name="language">A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.</param>
        /// <returns>ApiResponse of Chapter</returns>
		public ApiResponse<Chapter> getWithHttpInfo(string videoId, string language)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling ChaptersApi->get");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling ChaptersApi->get");

            var localVarPath = "/videos/{videoId}/chapters/{language}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (language != null) localVarPathParams.Add("language", this.ApiClient.ParameterToString(language)); // path parameter

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Chapter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Chapter) this.ApiClient.Deserialize(localVarResponse, typeof(Chapter)));
        }
        /// <summary>
        /// Upload a chapter Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos) for more details.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want to upload a chapter for.</param>
        /// <param name="language">A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.</param>
        /// <param name="file">The VTT file describing the chapters you want to upload.</param>
        /// <returns>Chapter</returns>
		public Chapter upload(string videoId, string language, System.IO.Stream file)
        {
             ApiResponse<Chapter> localVarResponse = uploadWithHttpInfo(videoId, language, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a chapter Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos) for more details.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want to upload a chapter for.</param>
        /// <param name="language">A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.</param>
        /// <param name="file">The VTT file describing the chapters you want to upload.</param>
        /// <returns>ApiResponse of Chapter</returns>
		public ApiResponse<Chapter> uploadWithHttpInfo(string videoId, string language, System.IO.Stream file)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling ChaptersApi->upload");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling ChaptersApi->upload");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling ChaptersApi->upload");

            var localVarPath = "/videos/{videoId}/chapters/{language}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (language != null) localVarPathParams.Add("language", this.ApiClient.ParameterToString(language)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.ApiClient.ParameterToFile("file", file));

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Chapter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Chapter) this.ApiClient.Deserialize(localVarResponse, typeof(Chapter)));
        }
    }
}
