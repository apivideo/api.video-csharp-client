/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using VideoApiClient.Client;
using VideoApiClient.Model;

namespace VideoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class LiveApi
    {
        /// <summary>
        /// Api Client Instance
        /// </summary>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="LiveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LiveApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Delete a live stream 
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique ID for the live stream that you want to remove.</param>
        /// <returns></returns>
		public void delete(string liveStreamId)
        {
             deleteWithHttpInfo(liveStreamId);
        }

        /// <summary>
        /// Delete a live stream 
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique ID for the live stream that you want to remove.</param>
        /// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> deleteWithHttpInfo(string liveStreamId)
        {
            // verify the required parameter 'liveStreamId' is set
            if (liveStreamId == null)
                throw new ApiException(400, "Missing required parameter 'liveStreamId' when calling LiveApi->delete");

            var localVarPath = "/live-streams/{liveStreamId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (liveStreamId != null) localVarPathParams.Add("liveStreamId", this.ApiClient.ParameterToString(liveStreamId)); // path parameter

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }
        /// <summary>
        /// Delete a thumbnail Send the unique identifier for a live stream to delete it from the system.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique identifier for the live stream you want to delete. </param>
        /// <returns>LiveStream</returns>
		public LiveStream deleteThumbnail(string liveStreamId)
        {
             ApiResponse<LiveStream> localVarResponse = deleteThumbnailWithHttpInfo(liveStreamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a thumbnail Send the unique identifier for a live stream to delete it from the system.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique identifier for the live stream you want to delete. </param>
        /// <returns>ApiResponse of LiveStream</returns>
		public ApiResponse<LiveStream> deleteThumbnailWithHttpInfo(string liveStreamId)
        {
            // verify the required parameter 'liveStreamId' is set
            if (liveStreamId == null)
                throw new ApiException(400, "Missing required parameter 'liveStreamId' when calling LiveApi->deleteThumbnail");

            var localVarPath = "/live-streams/{liveStreamId}/thumbnail";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (liveStreamId != null) localVarPathParams.Add("liveStreamId", this.ApiClient.ParameterToString(liveStreamId)); // path parameter

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<LiveStream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LiveStream) this.ApiClient.Deserialize(localVarResponse, typeof(LiveStream)));
        }
        /// <summary>
        /// List all live streams With no parameters added to the url, this will return all livestreams. Query by name or key to limit the list.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamKey">The unique stream key that allows you to stream videos. (optional)</param>
        /// <param name="name">You can filter live streams by their name or a part of their name. (optional)</param>
        /// <param name="sortBy">Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format. (optional)</param>
        /// <param name="sortOrder">Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending. (optional)</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>LiveStreamListResponse</returns>
		public LiveStreamListResponse list(string streamKey = default, string name = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<LiveStreamListResponse> localVarResponse = listWithHttpInfo(streamKey, name, sortBy, sortOrder, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all live streams With no parameters added to the url, this will return all livestreams. Query by name or key to limit the list.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamKey">The unique stream key that allows you to stream videos. (optional)</param>
        /// <param name="name">You can filter live streams by their name or a part of their name. (optional)</param>
        /// <param name="sortBy">Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format. (optional)</param>
        /// <param name="sortOrder">Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending. (optional)</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>ApiResponse of LiveStreamListResponse</returns>
		public ApiResponse<LiveStreamListResponse> listWithHttpInfo(string streamKey = default, string name = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {

            var localVarPath = "/live-streams";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamKey != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "streamKey", streamKey)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<LiveStreamListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LiveStreamListResponse) this.ApiClient.Deserialize(localVarResponse, typeof(LiveStreamListResponse)));
        }
            /**
            * List all live streams
            * With no parameters added to the url, this will return all livestreams. Query by name or key to limit the list.
            * @return APIlistRequest
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            </table>
            */
            public APIlistRequest list() {
                return new APIlistRequest(this);
            }

    public class APIlistRequest {
        private string streamKey;
        private string name;
        private string sortBy;
        private string sortOrder;
        private int? currentPage;
        private int? pageSize;

        private LiveApi currentApiInstance;

        public APIlistRequest(LiveApi instance) {
            this.currentApiInstance = instance;
        }

        /**
         * Set streamKey
         * @param streamKey The unique stream key that allows you to stream videos. (optional)
         * @return APIlistRequest
         */
        public APIlistRequest StreamKey(string streamKey) {
            this.streamKey = streamKey;
            return this;
        }

        /**
         * Set name
         * @param name You can filter live streams by their name or a part of their name. (optional)
         * @return APIlistRequest
         */
        public APIlistRequest Name(string name) {
            this.name = name;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format. (optional)
         * @return APIlistRequest
         */
        public APIlistRequest SortBy(string sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set sortOrder
         * @param sortOrder Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending. (optional)
         * @return APIlistRequest
         */
        public APIlistRequest SortOrder(string sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return APIlistRequest
         */
        public APIlistRequest CurrentPage(int? currentPage) {
            this.currentPage = currentPage;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return APIlistRequest
         */
        public APIlistRequest PageSize(int? pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        

        /**
         * Execute list request
         * @return LiveStreamListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Page<LiveStream> execute(){
            ApiResponse<LiveStreamListResponse> localVarResp = this.currentApiInstance.listWithHttpInfo(streamKey, name, sortBy, sortOrder, currentPage, pageSize);
            return new Page<LiveStream>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                try {
                    return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                } catch (ApiException e) {
                    throw new Exception(e.Message);
                }
            }); 
        }

        private APIlistRequest copy() {
            APIlistRequest copy = new APIlistRequest( this.currentApiInstance);
            copy.StreamKey(streamKey);
            copy.Name(name);
            copy.SortBy(sortBy);
            copy.SortOrder(sortOrder);
            copy.CurrentPage(currentPage);
            copy.PageSize(pageSize);
            return copy;
        }
    }
        /// <summary>
        /// Show live stream Supply a LivestreamId, and you&#39;ll get all the details for streaming into, and watching the livestream.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique ID for the live stream you want to watch.</param>
        /// <returns>LiveStream</returns>
		public LiveStream get(string liveStreamId)
        {
             ApiResponse<LiveStream> localVarResponse = getWithHttpInfo(liveStreamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show live stream Supply a LivestreamId, and you&#39;ll get all the details for streaming into, and watching the livestream.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique ID for the live stream you want to watch.</param>
        /// <returns>ApiResponse of LiveStream</returns>
		public ApiResponse<LiveStream> getWithHttpInfo(string liveStreamId)
        {
            // verify the required parameter 'liveStreamId' is set
            if (liveStreamId == null)
                throw new ApiException(400, "Missing required parameter 'liveStreamId' when calling LiveApi->get");

            var localVarPath = "/live-streams/{liveStreamId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (liveStreamId != null) localVarPathParams.Add("liveStreamId", this.ApiClient.ParameterToString(liveStreamId)); // path parameter

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<LiveStream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LiveStream) this.ApiClient.Deserialize(localVarResponse, typeof(LiveStream)));
        }
        /// <summary>
        /// Update a live stream Use this endpoint to update the player, or to turn recording on/off (saving a copy of the livestream). NOTE: If the livestream is actively streaming, changing the recording status will only affect the NEXT stream.    The public&#x3D;false &#39;private livestream&#39; is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.</param>
        /// <param name="liveStreamUpdatePayload"> (optional)</param>
        /// <returns>LiveStream</returns>
		public LiveStream update(string liveStreamId, LiveStreamUpdatePayload liveStreamUpdatePayload = default)
        {
             ApiResponse<LiveStream> localVarResponse = updateWithHttpInfo(liveStreamId, liveStreamUpdatePayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a live stream Use this endpoint to update the player, or to turn recording on/off (saving a copy of the livestream). NOTE: If the livestream is actively streaming, changing the recording status will only affect the NEXT stream.    The public&#x3D;false &#39;private livestream&#39; is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.</param>
        /// <param name="liveStreamUpdatePayload"> (optional)</param>
        /// <returns>ApiResponse of LiveStream</returns>
		public ApiResponse<LiveStream> updateWithHttpInfo(string liveStreamId, LiveStreamUpdatePayload liveStreamUpdatePayload = default)
        {
            // verify the required parameter 'liveStreamId' is set
            if (liveStreamId == null)
                throw new ApiException(400, "Missing required parameter 'liveStreamId' when calling LiveApi->update");

            var localVarPath = "/live-streams/{liveStreamId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (liveStreamId != null) localVarPathParams.Add("liveStreamId", this.ApiClient.ParameterToString(liveStreamId)); // path parameter
            if (liveStreamUpdatePayload != null && liveStreamUpdatePayload.GetType() != typeof(byte[]) && liveStreamUpdatePayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(liveStreamUpdatePayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = liveStreamUpdatePayload; // byte array
            }

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<LiveStream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LiveStream) this.ApiClient.Deserialize(localVarResponse, typeof(LiveStream)));
        }
        /// <summary>
        /// Create live stream A live stream will give you the &#39;connection point&#39; to RTMP your video stream to api.video. It will also give you the details for viewers to watch the same livestream.  The public&#x3D;false &#39;private livestream&#39; is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer.  See our [Live Stream Tutorial](https://api.video/blog/tutorials/live-stream-tutorial) for a walkthrough of this API with OBS. Your RTMP endpoint for the livestream is rtmp://broadcast.api.video/s/{streamKey}
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamCreatePayload"> (optional)</param>
        /// <returns>LiveStream</returns>
		public LiveStream create(LiveStreamCreatePayload liveStreamCreatePayload = default)
        {
             ApiResponse<LiveStream> localVarResponse = createWithHttpInfo(liveStreamCreatePayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create live stream A live stream will give you the &#39;connection point&#39; to RTMP your video stream to api.video. It will also give you the details for viewers to watch the same livestream.  The public&#x3D;false &#39;private livestream&#39; is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer.  See our [Live Stream Tutorial](https://api.video/blog/tutorials/live-stream-tutorial) for a walkthrough of this API with OBS. Your RTMP endpoint for the livestream is rtmp://broadcast.api.video/s/{streamKey}
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamCreatePayload"> (optional)</param>
        /// <returns>ApiResponse of LiveStream</returns>
		public ApiResponse<LiveStream> createWithHttpInfo(LiveStreamCreatePayload liveStreamCreatePayload = default)
        {

            var localVarPath = "/live-streams";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (liveStreamCreatePayload != null && liveStreamCreatePayload.GetType() != typeof(byte[]) && liveStreamCreatePayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(liveStreamCreatePayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = liveStreamCreatePayload; // byte array
            }

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<LiveStream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LiveStream) this.ApiClient.Deserialize(localVarResponse, typeof(LiveStream)));
        }
        /// <summary>
        /// Upload a thumbnail Upload an image to use as a backdrop for your livestream.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique ID for the live stream you want to upload.</param>
        /// <param name="file">The image to be added as a thumbnail.</param>
        /// <returns>LiveStream</returns>
		public LiveStream uploadThumbnail(string liveStreamId, System.IO.Stream file)
        {
             ApiResponse<LiveStream> localVarResponse = uploadThumbnailWithHttpInfo(liveStreamId, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a thumbnail Upload an image to use as a backdrop for your livestream.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique ID for the live stream you want to upload.</param>
        /// <param name="file">The image to be added as a thumbnail.</param>
        /// <returns>ApiResponse of LiveStream</returns>
		public ApiResponse<LiveStream> uploadThumbnailWithHttpInfo(string liveStreamId, System.IO.Stream file)
        {
            // verify the required parameter 'liveStreamId' is set
            if (liveStreamId == null)
                throw new ApiException(400, "Missing required parameter 'liveStreamId' when calling LiveApi->uploadThumbnail");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling LiveApi->uploadThumbnail");

            var localVarPath = "/live-streams/{liveStreamId}/thumbnail";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (liveStreamId != null) localVarPathParams.Add("liveStreamId", this.ApiClient.ParameterToString(liveStreamId)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.ApiClient.ParameterToFile("file", file));

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<LiveStream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LiveStream) this.ApiClient.Deserialize(localVarResponse, typeof(LiveStream)));
        }

    }

}
