/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.IO;
using RestSharp;
using VideoApiClient.Client;
using VideoApiClient.Model;

namespace VideoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class RawStatisticsApi
    {
        /// <summary>
        /// Api Client Instance
        /// </summary>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="RawStatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RawStatisticsApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// List live stream player sessions 
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique identifier for the live stream you want to retrieve analytics for.</param>
        /// <param name="period">Period must have one of the following formats:   - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot;  For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot;  (optional)</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>RawStatisticsListLiveStreamAnalyticsResponse</returns>
		public RawStatisticsListLiveStreamAnalyticsResponse getLiveStreamAnalytics(string liveStreamId, string period = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<RawStatisticsListLiveStreamAnalyticsResponse> localVarResponse = getLiveStreamAnalyticsWithHttpInfo(liveStreamId, period, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List live stream player sessions 
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique identifier for the live stream you want to retrieve analytics for.</param>
        /// <param name="period">Period must have one of the following formats:   - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot;  For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot;  (optional)</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>ApiResponse of RawStatisticsListLiveStreamAnalyticsResponse</returns>
		public ApiResponse<RawStatisticsListLiveStreamAnalyticsResponse> getLiveStreamAnalyticsWithHttpInfo(string liveStreamId, string period = default, int? currentPage = default, int? pageSize = default)
        {
            // verify the required parameter 'liveStreamId' is set
            if (liveStreamId == null)
                throw new ApiException(400, "Missing required parameter 'liveStreamId' when calling RawStatisticsApi->getLiveStreamAnalytics");

            

            var localVarPath = "/analytics/live-streams/{liveStreamId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (liveStreamId != null) localVarPathParams.Add("liveStreamId", this.ApiClient.ParameterToString(liveStreamId)); // path parameter
            if (period != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<RawStatisticsListLiveStreamAnalyticsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RawStatisticsListLiveStreamAnalyticsResponse) this.ApiClient.Deserialize(localVarResponse, typeof(RawStatisticsListLiveStreamAnalyticsResponse)));
            
        }

        
            /**
            * List live stream player sessions
            * 
            * @param liveStreamId The unique identifier for the live stream you want to retrieve analytics for. (required)
            * @return APIgetLiveStreamAnalyticsRequest
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
                <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            </table>
            */
            public APIgetLiveStreamAnalyticsRequest getLiveStreamAnalytics(string liveStreamId) {
                return new APIgetLiveStreamAnalyticsRequest(this,liveStreamId);
            }

    public class APIgetLiveStreamAnalyticsRequest {
        private string liveStreamId;
        private string period;
        private int? currentPage;
        private int? pageSize;

        private RawStatisticsApi currentApiInstance;

        public APIgetLiveStreamAnalyticsRequest(RawStatisticsApi instance, string liveStreamId) {
            this.liveStreamId = liveStreamId;
            this.currentApiInstance = instance;
        }

        /**
         * Set period
         * @param period Period must have one of the following formats:   - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot;  For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot;  (optional)
         * @return APIgetLiveStreamAnalyticsRequest
         */
        public APIgetLiveStreamAnalyticsRequest Period(string period) {
            this.period = period;
            return this;
        }

        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return APIgetLiveStreamAnalyticsRequest
         */
        public APIgetLiveStreamAnalyticsRequest CurrentPage(int? currentPage) {
            this.currentPage = currentPage;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return APIgetLiveStreamAnalyticsRequest
         */
        public APIgetLiveStreamAnalyticsRequest PageSize(int? pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        

        /**
         * Execute getLiveStreamAnalytics request
         * @return RawStatisticsListLiveStreamAnalyticsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Page<LiveStreamSession> execute(){
            ApiResponse<RawStatisticsListLiveStreamAnalyticsResponse> localVarResp = this.currentApiInstance.getLiveStreamAnalyticsWithHttpInfo(liveStreamId, period, currentPage, pageSize);
            return new Page<LiveStreamSession>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                try {
                    return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                } catch (ApiException e) {
                    throw new Exception(e.Message);
                }
            }); 
        }

        private APIgetLiveStreamAnalyticsRequest copy() {
            APIgetLiveStreamAnalyticsRequest copy = new APIgetLiveStreamAnalyticsRequest( this.currentApiInstance, liveStreamId);
            copy.Period(period);
            copy.CurrentPage(currentPage);
            copy.PageSize(pageSize);
            return copy;
        }
    }
        /// <summary>
        /// List player session events Useful to track and measure video&#39;s engagement.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">A unique identifier you can use to reference and track a session with.</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>RawStatisticsListPlayerSessionEventsResponse</returns>
		public RawStatisticsListPlayerSessionEventsResponse listPlayerSessionEvents(string sessionId, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<RawStatisticsListPlayerSessionEventsResponse> localVarResponse = listPlayerSessionEventsWithHttpInfo(sessionId, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List player session events Useful to track and measure video&#39;s engagement.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">A unique identifier you can use to reference and track a session with.</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>ApiResponse of RawStatisticsListPlayerSessionEventsResponse</returns>
		public ApiResponse<RawStatisticsListPlayerSessionEventsResponse> listPlayerSessionEventsWithHttpInfo(string sessionId, int? currentPage = default, int? pageSize = default)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling RawStatisticsApi->listPlayerSessionEvents");

            

            var localVarPath = "/analytics/sessions/{sessionId}/events";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.ApiClient.ParameterToString(sessionId)); // path parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<RawStatisticsListPlayerSessionEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RawStatisticsListPlayerSessionEventsResponse) this.ApiClient.Deserialize(localVarResponse, typeof(RawStatisticsListPlayerSessionEventsResponse)));
            
        }

        
            /**
            * List player session events
            * Useful to track and measure video&#39;s engagement.
            * @param sessionId A unique identifier you can use to reference and track a session with. (required)
            * @return APIlistPlayerSessionEventsRequest
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
                <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            </table>
            */
            public APIlistPlayerSessionEventsRequest listPlayerSessionEvents(string sessionId) {
                return new APIlistPlayerSessionEventsRequest(this,sessionId);
            }

    public class APIlistPlayerSessionEventsRequest {
        private string sessionId;
        private int? currentPage;
        private int? pageSize;

        private RawStatisticsApi currentApiInstance;

        public APIlistPlayerSessionEventsRequest(RawStatisticsApi instance, string sessionId) {
            this.sessionId = sessionId;
            this.currentApiInstance = instance;
        }

        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return APIlistPlayerSessionEventsRequest
         */
        public APIlistPlayerSessionEventsRequest CurrentPage(int? currentPage) {
            this.currentPage = currentPage;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return APIlistPlayerSessionEventsRequest
         */
        public APIlistPlayerSessionEventsRequest PageSize(int? pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        

        /**
         * Execute listPlayerSessionEvents request
         * @return RawStatisticsListPlayerSessionEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Page<PlayerSessionEvent> execute(){
            ApiResponse<RawStatisticsListPlayerSessionEventsResponse> localVarResp = this.currentApiInstance.listPlayerSessionEventsWithHttpInfo(sessionId, currentPage, pageSize);
            return new Page<PlayerSessionEvent>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                try {
                    return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                } catch (ApiException e) {
                    throw new Exception(e.Message);
                }
            }); 
        }

        private APIlistPlayerSessionEventsRequest copy() {
            APIlistPlayerSessionEventsRequest copy = new APIlistPlayerSessionEventsRequest( this.currentApiInstance, sessionId);
            copy.CurrentPage(currentPage);
            copy.PageSize(pageSize);
            return copy;
        }
    }
        /// <summary>
        /// List video player sessions Retrieve all available user sessions for a specific video.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want to retrieve session information for.</param>
        /// <param name="period">Period must have one of the following formats:   - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018  For a range period:  -  Date range: 2018-01-01/2018-01-15  (optional)</param>
        /// <param name="metadata">Metadata and Dynamic Metadata filter. Send an array of key value pairs you want to filter sessios with. (optional)</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>RawStatisticsListSessionsResponse</returns>
		public RawStatisticsListSessionsResponse listSessions(string videoId, string period = default, List<string> metadata = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<RawStatisticsListSessionsResponse> localVarResponse = listSessionsWithHttpInfo(videoId, period, metadata, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List video player sessions Retrieve all available user sessions for a specific video.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want to retrieve session information for.</param>
        /// <param name="period">Period must have one of the following formats:   - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018  For a range period:  -  Date range: 2018-01-01/2018-01-15  (optional)</param>
        /// <param name="metadata">Metadata and Dynamic Metadata filter. Send an array of key value pairs you want to filter sessios with. (optional)</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>ApiResponse of RawStatisticsListSessionsResponse</returns>
		public ApiResponse<RawStatisticsListSessionsResponse> listSessionsWithHttpInfo(string videoId, string period = default, List<string> metadata = default, int? currentPage = default, int? pageSize = default)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling RawStatisticsApi->listSessions");

            

            var localVarPath = "/analytics/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (period != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter
            if (metadata != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("multi", "metadata", metadata)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<RawStatisticsListSessionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RawStatisticsListSessionsResponse) this.ApiClient.Deserialize(localVarResponse, typeof(RawStatisticsListSessionsResponse)));
            
        }

        
            /**
            * List video player sessions
            * Retrieve all available user sessions for a specific video.
            * @param videoId The unique identifier for the video you want to retrieve session information for. (required)
            * @return APIlistSessionsRequest
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
                <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            </table>
            */
            public APIlistSessionsRequest listSessions(string videoId) {
                return new APIlistSessionsRequest(this,videoId);
            }

    public class APIlistSessionsRequest {
        private string videoId;
        private string period;
        private List<string> metadata;
        private int? currentPage;
        private int? pageSize;

        private RawStatisticsApi currentApiInstance;

        public APIlistSessionsRequest(RawStatisticsApi instance, string videoId) {
            this.videoId = videoId;
            this.currentApiInstance = instance;
        }

        /**
         * Set period
         * @param period Period must have one of the following formats:   - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018  For a range period:  -  Date range: 2018-01-01/2018-01-15  (optional)
         * @return APIlistSessionsRequest
         */
        public APIlistSessionsRequest Period(string period) {
            this.period = period;
            return this;
        }

        /**
         * Set metadata
         * @param metadata Metadata and Dynamic Metadata filter. Send an array of key value pairs you want to filter sessios with. (optional)
         * @return APIlistSessionsRequest
         */
        public APIlistSessionsRequest Metadata(List<string> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return APIlistSessionsRequest
         */
        public APIlistSessionsRequest CurrentPage(int? currentPage) {
            this.currentPage = currentPage;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return APIlistSessionsRequest
         */
        public APIlistSessionsRequest PageSize(int? pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        

        /**
         * Execute listSessions request
         * @return RawStatisticsListSessionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Page<VideoSession> execute(){
            ApiResponse<RawStatisticsListSessionsResponse> localVarResp = this.currentApiInstance.listSessionsWithHttpInfo(videoId, period, metadata, currentPage, pageSize);
            return new Page<VideoSession>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                try {
                    return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                } catch (ApiException e) {
                    throw new Exception(e.Message);
                }
            }); 
        }

        private APIlistSessionsRequest copy() {
            APIlistSessionsRequest copy = new APIlistSessionsRequest( this.currentApiInstance, videoId);
            copy.Period(period);
            copy.Metadata(metadata);
            copy.CurrentPage(currentPage);
            copy.PageSize(pageSize);
            return copy;
        }
    }

    }

}
