/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.IO;
using RestSharp;
using VideoApiClient.Client;
using VideoApiClient.Model;

namespace VideoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class VideosApi
    {
        /// <summary>
        /// Api Client Instance
        /// </summary>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Delete a video If you do not need a video any longer, you can send a request to delete it. All you need is the videoId.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video ID for the video you want to delete.</param>
        /// <returns></returns>
		public void delete(string videoId)
        {
             deleteWithHttpInfo(videoId);
        }

        /// <summary>
        /// Delete a video If you do not need a video any longer, you can send a request to delete it. All you need is the videoId.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video ID for the video you want to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> deleteWithHttpInfo(string videoId)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->delete");

            

            var localVarPath = "/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
            
        }

        
        /// <summary>
        /// Show a video This call provides the same JSON information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want details about.</param>
        /// <returns>Video</returns>
		public Video get(string videoId)
        {
             ApiResponse<Video> localVarResponse = getWithHttpInfo(videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show a video This call provides the same JSON information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want details about.</param>
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> getWithHttpInfo(string videoId)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->get");

            

            var localVarPath = "/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
        }

        
        /// <summary>
        /// Show video status This API provides upload status &amp; encoding status to determine when the video is uploaded or ready to playback.  Once encoding is completed, the response also lists the available stream qualities.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want the status for.</param>
        /// <returns>Videostatus</returns>
		public Videostatus getVideoStatus(string videoId)
        {
             ApiResponse<Videostatus> localVarResponse = getVideoStatusWithHttpInfo(videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show video status This API provides upload status &amp; encoding status to determine when the video is uploaded or ready to playback.  Once encoding is completed, the response also lists the available stream qualities.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want the status for.</param>
        /// <returns>ApiResponse of Videostatus</returns>
		public ApiResponse<Videostatus> getVideoStatusWithHttpInfo(string videoId)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->getVideoStatus");

            

            var localVarPath = "/videos/{videoId}/status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Videostatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Videostatus) this.ApiClient.Deserialize(localVarResponse, typeof(Videostatus)));
            
        }

        
        /// <summary>
        /// List all videos Requests to this endpoint return a list of your videos (with all their details). With no parameters added to this query, the API returns all videos. You can filter what videos the API returns using the parameters described below.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)</param>
        /// <param name="tags">A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)</param>
        /// <param name="metadata">Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. (optional)</param>
        /// <param name="description">If you described a video with a term or sentence, you can add it here to return videos containing this string. (optional)</param>
        /// <param name="liveStreamId">If you know the ID for a live stream, you can retrieve the stream by adding the ID for it here. (optional)</param>
        /// <param name="sortBy">Allowed: publishedAt, title. You can search by the time videos were published at, or by title. (optional)</param>
        /// <param name="sortOrder">Allowed: asc, desc. asc is ascending and sorts from A to Z. desc is descending and sorts from Z to A. (optional)</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>VideosListResponse</returns>
		public VideosListResponse list(string title = default, List<string> tags = default, List<string> metadata = default, string description = default, string liveStreamId = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<VideosListResponse> localVarResponse = listWithHttpInfo(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all videos Requests to this endpoint return a list of your videos (with all their details). With no parameters added to this query, the API returns all videos. You can filter what videos the API returns using the parameters described below.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)</param>
        /// <param name="tags">A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)</param>
        /// <param name="metadata">Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. (optional)</param>
        /// <param name="description">If you described a video with a term or sentence, you can add it here to return videos containing this string. (optional)</param>
        /// <param name="liveStreamId">If you know the ID for a live stream, you can retrieve the stream by adding the ID for it here. (optional)</param>
        /// <param name="sortBy">Allowed: publishedAt, title. You can search by the time videos were published at, or by title. (optional)</param>
        /// <param name="sortOrder">Allowed: asc, desc. asc is ascending and sorts from A to Z. desc is descending and sorts from Z to A. (optional)</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>ApiResponse of VideosListResponse</returns>
		public ApiResponse<VideosListResponse> listWithHttpInfo(string title = default, List<string> tags = default, List<string> metadata = default, string description = default, string liveStreamId = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {

            

            var localVarPath = "/videos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (title != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("multi", "tags", tags)); // query parameter
            if (metadata != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("multi", "metadata", metadata)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<VideosListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VideosListResponse) this.ApiClient.Deserialize(localVarResponse, typeof(VideosListResponse)));
            
        }

        
            /**
            * List all videos
            * Requests to this endpoint return a list of your videos (with all their details). With no parameters added to this query, the API returns all videos. You can filter what videos the API returns using the parameters described below.
            * @return APIlistRequest
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
                <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            </table>
            */
            public APIlistRequest list() {
                return new APIlistRequest(this);
            }

    public class APIlistRequest {
        private string title;
        private List<string> tags;
        private List<string> metadata;
        private string description;
        private string liveStreamId;
        private string sortBy;
        private string sortOrder;
        private int? currentPage;
        private int? pageSize;

        private VideosApi currentApiInstance;

        public APIlistRequest(VideosApi instance) {
            this.currentApiInstance = instance;
        }

        /**
         * Set title
         * @param title The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)
         * @return APIlistRequest
         */
        public APIlistRequest Title(string title) {
            this.title = title;
            return this;
        }

        /**
         * Set tags
         * @param tags A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)
         * @return APIlistRequest
         */
        public APIlistRequest Tags(List<string> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * Set metadata
         * @param metadata Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. (optional)
         * @return APIlistRequest
         */
        public APIlistRequest Metadata(List<string> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Set description
         * @param description If you described a video with a term or sentence, you can add it here to return videos containing this string. (optional)
         * @return APIlistRequest
         */
        public APIlistRequest Description(string description) {
            this.description = description;
            return this;
        }

        /**
         * Set liveStreamId
         * @param liveStreamId If you know the ID for a live stream, you can retrieve the stream by adding the ID for it here. (optional)
         * @return APIlistRequest
         */
        public APIlistRequest LiveStreamId(string liveStreamId) {
            this.liveStreamId = liveStreamId;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy Allowed: publishedAt, title. You can search by the time videos were published at, or by title. (optional)
         * @return APIlistRequest
         */
        public APIlistRequest SortBy(string sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set sortOrder
         * @param sortOrder Allowed: asc, desc. asc is ascending and sorts from A to Z. desc is descending and sorts from Z to A. (optional)
         * @return APIlistRequest
         */
        public APIlistRequest SortOrder(string sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return APIlistRequest
         */
        public APIlistRequest CurrentPage(int? currentPage) {
            this.currentPage = currentPage;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return APIlistRequest
         */
        public APIlistRequest PageSize(int? pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        

        /**
         * Execute list request
         * @return VideosListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Page<Video> execute(){
            ApiResponse<VideosListResponse> localVarResp = this.currentApiInstance.listWithHttpInfo(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize);
            return new Page<Video>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                try {
                    return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                } catch (ApiException e) {
                    throw new Exception(e.Message);
                }
            }); 
        }

        private APIlistRequest copy() {
            APIlistRequest copy = new APIlistRequest( this.currentApiInstance);
            copy.Title(title);
            copy.Tags(tags);
            copy.Metadata(metadata);
            copy.Description(description);
            copy.LiveStreamId(liveStreamId);
            copy.SortBy(sortBy);
            copy.SortOrder(sortOrder);
            copy.CurrentPage(currentPage);
            copy.PageSize(pageSize);
            return copy;
        }
    }
        /// <summary>
        /// Update a video Use this endpoint to update the parameters associated with your video. The video you are updating is determined by the video ID you provide in the path. For each parameter you want to update, include the update in the request body. NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video ID for the video you want to delete.</param>
        /// <param name="videoUpdatePayload"> (optional)</param>
        /// <returns>Video</returns>
		public Video update(string videoId, VideoUpdatePayload videoUpdatePayload = default)
        {
             ApiResponse<Video> localVarResponse = updateWithHttpInfo(videoId, videoUpdatePayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a video Use this endpoint to update the parameters associated with your video. The video you are updating is determined by the video ID you provide in the path. For each parameter you want to update, include the update in the request body. NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video ID for the video you want to delete.</param>
        /// <param name="videoUpdatePayload"> (optional)</param>
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> updateWithHttpInfo(string videoId, VideoUpdatePayload videoUpdatePayload = default)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->update");

            

            var localVarPath = "/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (videoUpdatePayload != null && videoUpdatePayload.GetType() != typeof(byte[]) && videoUpdatePayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(videoUpdatePayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoUpdatePayload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
        }

        
        /// <summary>
        /// Pick a thumbnail Pick a thumbnail from the given time code. If you&#39;d like to upload an image for your thumbnail, use the [Upload a Thumbnail](https://docs.api.video/reference#post_videos-videoid-thumbnail) endpoint. There may be a short delay for the thumbnail to update.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.</param>
        /// <param name="videoThumbnailPickPayload"> (optional)</param>
        /// <returns>Video</returns>
		public Video pickThumbnail(string videoId, VideoThumbnailPickPayload videoThumbnailPickPayload = default)
        {
             ApiResponse<Video> localVarResponse = pickThumbnailWithHttpInfo(videoId, videoThumbnailPickPayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pick a thumbnail Pick a thumbnail from the given time code. If you&#39;d like to upload an image for your thumbnail, use the [Upload a Thumbnail](https://docs.api.video/reference#post_videos-videoid-thumbnail) endpoint. There may be a short delay for the thumbnail to update.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.</param>
        /// <param name="videoThumbnailPickPayload"> (optional)</param>
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> pickThumbnailWithHttpInfo(string videoId, VideoThumbnailPickPayload videoThumbnailPickPayload = default)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->pickThumbnail");

            

            var localVarPath = "/videos/{videoId}/thumbnail";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (videoThumbnailPickPayload != null && videoThumbnailPickPayload.GetType() != typeof(byte[]) && videoThumbnailPickPayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(videoThumbnailPickPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoThumbnailPickPayload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
        }

        
        /// <summary>
        /// Create a video To create a video, you create its metadata first, before adding the video file (exception - when using an existing HTTP source).  Videos are public by default. Mp4 encoded versions are created at the highest quality (max 1080p) by default.  &#x60;&#x60;&#x60;shell $ curl https://ws.api.video/videos \\ -H &#39;Authorization: Bearer {access_token} \\ -d &#39;{\&quot;title\&quot;:\&quot;My video\&quot;,       \&quot;description\&quot;:\&quot;so many details\&quot;,      \&quot;mp4Support\&quot;:true }&#39; &#x60;&#x60;&#x60;  ### Creating a hosted video   You can also create a video directly from one hosted on a third-party server by giving its URI in &#x60;source&#x60; parameter:  &#x60;&#x60;&#x60;shell $ curl https://ws.api.video/videos \\ -H &#39;Authorization: Bearer {access_token} \\ -d &#39;{\&quot;source\&quot;:\&quot;http://uri/to/video.mp4\&quot;, \&quot;title\&quot;:\&quot;My video\&quot;}&#39; &#x60;&#x60;&#x60;  In this case, the service will respond &#x60;202 Accepted&#x60; and download the video asynchronously.   We have tutorials on: * [Creating and uploading videos](https://api.video/blog/tutorials/video-upload-tutorial) * [Uploading large videos](https://api.video/blog/tutorials/video-upload-tutorial-large-videos) * [Using tags with videos](https://api.video/blog/tutorials/video-tagging-best-practices) * [Private videos](https://api.video/blog/tutorials/tutorial-private-videos) 
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoCreatePayload">video to create (optional)</param>
        /// <returns>Video</returns>
		public Video create(VideoCreatePayload videoCreatePayload = default)
        {
             ApiResponse<Video> localVarResponse = createWithHttpInfo(videoCreatePayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a video To create a video, you create its metadata first, before adding the video file (exception - when using an existing HTTP source).  Videos are public by default. Mp4 encoded versions are created at the highest quality (max 1080p) by default.  &#x60;&#x60;&#x60;shell $ curl https://ws.api.video/videos \\ -H &#39;Authorization: Bearer {access_token} \\ -d &#39;{\&quot;title\&quot;:\&quot;My video\&quot;,       \&quot;description\&quot;:\&quot;so many details\&quot;,      \&quot;mp4Support\&quot;:true }&#39; &#x60;&#x60;&#x60;  ### Creating a hosted video   You can also create a video directly from one hosted on a third-party server by giving its URI in &#x60;source&#x60; parameter:  &#x60;&#x60;&#x60;shell $ curl https://ws.api.video/videos \\ -H &#39;Authorization: Bearer {access_token} \\ -d &#39;{\&quot;source\&quot;:\&quot;http://uri/to/video.mp4\&quot;, \&quot;title\&quot;:\&quot;My video\&quot;}&#39; &#x60;&#x60;&#x60;  In this case, the service will respond &#x60;202 Accepted&#x60; and download the video asynchronously.   We have tutorials on: * [Creating and uploading videos](https://api.video/blog/tutorials/video-upload-tutorial) * [Uploading large videos](https://api.video/blog/tutorials/video-upload-tutorial-large-videos) * [Using tags with videos](https://api.video/blog/tutorials/video-tagging-best-practices) * [Private videos](https://api.video/blog/tutorials/tutorial-private-videos) 
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoCreatePayload">video to create (optional)</param>
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> createWithHttpInfo(VideoCreatePayload videoCreatePayload = default)
        {

            

            var localVarPath = "/videos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoCreatePayload != null && videoCreatePayload.GetType() != typeof(byte[]) && videoCreatePayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(videoCreatePayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoCreatePayload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
        }

        
        /// <summary>
        /// Upload a video To upload a video to the videoId you created. Replace {videoId} with the id you&#39;d like to use, {access_token} with your token, and /path/to/video.mp4 with the path to the video you&#39;d like to upload. You can only upload your video to the videoId once.  &#x60;&#x60;&#x60;bash curl https://ws.api.video/videos/{videoId}/source \\   -H &#39;Authorization: Bearer {access_token}&#39; \\   -F file&#x3D;@/path/to/video.mp4   &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Enter the videoId you want to use to upload your video.</param>
        /// <param name="file">The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video.</param>
        /// <returns>Video</returns>
		public Video upload(string videoId, System.IO.Stream file)
        {
             ApiResponse<Video> localVarResponse = uploadWithHttpInfo(videoId, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a video To upload a video to the videoId you created. Replace {videoId} with the id you&#39;d like to use, {access_token} with your token, and /path/to/video.mp4 with the path to the video you&#39;d like to upload. You can only upload your video to the videoId once.  &#x60;&#x60;&#x60;bash curl https://ws.api.video/videos/{videoId}/source \\   -H &#39;Authorization: Bearer {access_token}&#39; \\   -F file&#x3D;@/path/to/video.mp4   &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Enter the videoId you want to use to upload your video.</param>
        /// <param name="file">The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video.</param>
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> uploadWithHttpInfo(string videoId, System.IO.Stream file)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->upload");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling VideosApi->upload");

            
            long totalBytes = file.Length;
            int chunkSize = Convert.ToInt32(this.ApiClient.UploadChunkSize);

            var localVarPath = "/videos/{videoId}/source";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.ApiClient.ParameterToFile("file", file));

            if (totalBytes > chunkSize)
            {
                ApiResponse<Video> lastRes = null;
                localVarHeaderParams.Add("Content-Range", "");
                for (int i = 0; i < totalBytes; i += chunkSize)
                {
                    byte[] buffer = new byte[chunkSize];
                    localVarHeaderParams["Content-Range"] = "bytes " + i + "-" + (Math.Min(i+chunkSize,totalBytes)-1) + "/" + totalBytes;
                    
                    file.Read(buffer, 0, chunkSize);

                    MemoryStream stream = new MemoryStream(buffer);
                    if (stream != null) localVarFileParams["file"]= this.ApiClient.ParameterToFile("file", stream);
                    // make the HTTP request
                    IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                        Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                        localVarPathParams, localVarContentType);

                    int localVarStatusCode = (int)localVarResponse.StatusCode;
                    lastRes = new ApiResponse<Video>(localVarStatusCode,
                        localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                        (Video)this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
                }
                return lastRes;
            }
            else{

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
            }
        }

        
        /// <summary>
        /// Upload a thumbnail In creating a thumbnail, you may either upload an image, or you can pick a time in the video to be used as thumbnail. This endpoint is for uploading an image. Use [Pick a Thumbnail](https://docs.api.video/reference#patch_videos-videoid-thumbnail) to pick a time in the video. There may be a short delay before the new thumbnail is delivered to our CDN.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Unique identifier of the chosen video </param>
        /// <param name="file">The image to be added as a thumbnail.</param>
        /// <returns>Video</returns>
		public Video uploadThumbnail(string videoId, System.IO.Stream file)
        {
             ApiResponse<Video> localVarResponse = uploadThumbnailWithHttpInfo(videoId, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a thumbnail In creating a thumbnail, you may either upload an image, or you can pick a time in the video to be used as thumbnail. This endpoint is for uploading an image. Use [Pick a Thumbnail](https://docs.api.video/reference#patch_videos-videoid-thumbnail) to pick a time in the video. There may be a short delay before the new thumbnail is delivered to our CDN.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Unique identifier of the chosen video </param>
        /// <param name="file">The image to be added as a thumbnail.</param>
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> uploadThumbnailWithHttpInfo(string videoId, System.IO.Stream file)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->uploadThumbnail");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling VideosApi->uploadThumbnail");

            

            var localVarPath = "/videos/{videoId}/thumbnail";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
        }

        

    }

}
