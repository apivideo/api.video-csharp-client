/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.IO;
using VideoApiClient.Upload;
using RestSharp;
using VideoApiClient.Client;
using VideoApiClient.Model;

namespace VideoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class VideosDelegatedUploadApi
    {
        /// <summary>
        /// Api Client Instance
        /// </summary>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosDelegatedUploadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosDelegatedUploadApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Delete an upload token Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadToken">The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.</param>
        
        /// <returns></returns>
		public void deleteToken(string uploadToken)
        {
             deleteTokenWithHttpInfo(uploadToken);
        }

        /// <summary>
        /// Delete an upload token Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadToken">The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.</param>
        
        /// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> deleteTokenWithHttpInfo(string uploadToken)
        {
            // verify the required parameter 'uploadToken' is set
            if (uploadToken == null)
                throw new ApiException(400, "Missing required parameter 'uploadToken' when calling VideosDelegatedUploadApi->deleteToken");

            

            var localVarPath = "/upload-tokens/{uploadToken}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadToken != null) localVarPathParams.Add("uploadToken", this.ApiClient.ParameterToString(uploadToken)); // path parameter


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
            
        }

        
        /// <summary>
        /// List all active upload tokens. A delegated token is used to allow secure uploads without exposing your API key. Use this endpoint to retrieve a list of all currently active delegated tokens.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Allowed: createdAt, ttl. You can use these to sort by when a token was created, or how much longer the token will be active (ttl - time to live). Date and time is presented in ISO-8601 format. (optional)</param>
/// <param name="sortOrder">Allowed: asc, desc. Ascending is 0-9 or A-Z. Descending is 9-0 or Z-A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>TokenListResponse</returns>
		public TokenListResponse listTokens(string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<TokenListResponse> localVarResponse = listTokensWithHttpInfo(sortBy, sortOrder, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all active upload tokens. A delegated token is used to allow secure uploads without exposing your API key. Use this endpoint to retrieve a list of all currently active delegated tokens.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Allowed: createdAt, ttl. You can use these to sort by when a token was created, or how much longer the token will be active (ttl - time to live). Date and time is presented in ISO-8601 format. (optional)</param>
/// <param name="sortOrder">Allowed: asc, desc. Ascending is 0-9 or A-Z. Descending is 9-0 or Z-A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of TokenListResponse</returns>
		public ApiResponse<TokenListResponse> listTokensWithHttpInfo(string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {

            

            var localVarPath = "/upload-tokens";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sortBy != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<TokenListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenListResponse) this.ApiClient.Deserialize(localVarResponse, typeof(TokenListResponse)));
            
        }

        
        /// <summary>
        /// A delegated token is used to allow secure uploads without exposing your API key. Use this endpoint to retrieve a list of all currently active delegated tokens.
        /// </summary>
        /// <returns>APIlistTokensRequest</returns>
        public APIlistTokensRequest listTokens() {
            return new APIlistTokensRequest(this);
        }

        /// <summary>
        /// Request listTokens class to get paginated list of items
        /// </summary>
        public class APIlistTokensRequest {
            private string sortBy;
            private string sortOrder;
            private int? currentPage;
            private int? pageSize;

            private VideosDelegatedUploadApi currentApiInstance;

            /// <summary>
            /// Class constructor with api instance
            /// </summary>
            /// <param name="instance">Instance of the current api</param>
            public APIlistTokensRequest(VideosDelegatedUploadApi instance) {
                this.currentApiInstance = instance;
            }

            /// <summary>
            /// Set sortBy
            /// </summary>
            /// <param name="sortBy">Allowed: createdAt, ttl. You can use these to sort by when a token was created, or how much longer the token will be active (ttl - time to live). Date and time is presented in ISO-8601 format. (optional)</param>
            /// <returns>APIlistTokensRequest</returns>
            public APIlistTokensRequest SortBy(string sortBy) {
                this.sortBy = sortBy;
                return this;
            }

            /// <summary>
            /// Set sortOrder
            /// </summary>
            /// <param name="sortOrder">Allowed: asc, desc. Ascending is 0-9 or A-Z. Descending is 9-0 or Z-A. (optional)</param>
            /// <returns>APIlistTokensRequest</returns>
            public APIlistTokensRequest SortOrder(string sortOrder) {
                this.sortOrder = sortOrder;
                return this;
            }

            /// <summary>
            /// Set currentPage
            /// </summary>
            /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
            /// <returns>APIlistTokensRequest</returns>
            public APIlistTokensRequest CurrentPage(int? currentPage) {
                this.currentPage = currentPage;
                return this;
            }

            /// <summary>
            /// Set pageSize
            /// </summary>
            /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
            /// <returns>APIlistTokensRequest</returns>
            public APIlistTokensRequest PageSize(int? pageSize) {
                this.pageSize = pageSize;
                return this;
            }

            

            /// <summary>
            /// Execute listTokens request
            /// </summary>
            /// <returns>TokenListResponse </returns>
            public Page<UploadToken> execute(){
                ApiResponse<TokenListResponse> localVarResp = this.currentApiInstance.listTokensWithHttpInfo(sortBy, sortOrder, currentPage, pageSize);
                return new Page<UploadToken>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                    try {
                        return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                    } catch (ApiException e) {
                        throw new Exception(e.Message);
                    }
                }); 
            }

            private APIlistTokensRequest copy() {
                APIlistTokensRequest copy = new APIlistTokensRequest( this.currentApiInstance);
                copy.SortBy(sortBy);
                copy.SortOrder(sortOrder);
                copy.CurrentPage(currentPage);
                copy.PageSize(pageSize);
                return copy;
            }
        }
        /// <summary>
        /// Show upload token You can retrieve details about a specific upload token if you have the unique identifier for the upload token. Add it in the path of the endpoint. Details include time-to-live (ttl), when the token was created, and when it will expire.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadToken">The unique identifier for the token you want information about.</param>
        
        /// <returns>UploadToken</returns>
		public UploadToken getToken(string uploadToken)
        {
             ApiResponse<UploadToken> localVarResponse = getTokenWithHttpInfo(uploadToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show upload token You can retrieve details about a specific upload token if you have the unique identifier for the upload token. Add it in the path of the endpoint. Details include time-to-live (ttl), when the token was created, and when it will expire.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadToken">The unique identifier for the token you want information about.</param>
        
        /// <returns>ApiResponse of UploadToken</returns>
		public ApiResponse<UploadToken> getTokenWithHttpInfo(string uploadToken)
        {
            // verify the required parameter 'uploadToken' is set
            if (uploadToken == null)
                throw new ApiException(400, "Missing required parameter 'uploadToken' when calling VideosDelegatedUploadApi->getToken");

            

            var localVarPath = "/upload-tokens/{uploadToken}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadToken != null) localVarPathParams.Add("uploadToken", this.ApiClient.ParameterToString(uploadToken)); // path parameter


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<UploadToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadToken) this.ApiClient.Deserialize(localVarResponse, typeof(UploadToken)));
            
        }

        
        /// <summary>
        /// Upload with an upload token When given a token, anyone can upload a file to the URI &#x60;https://ws.api.video/upload?token&#x3D;&lt;tokenId&gt;&#x60;.  Example with cURL:  &#x60;&#x60;&#x60;curl $ curl  - -request POST - -url &#39;https://ws.api.video/upload?token&#x3D;toXXX&#39;  - -header &#39;content-type: multipart/form-data&#39;  -F file&#x3D;@video.mp4 &#x60;&#x60;&#x60;  Or in an HTML form, with a little JavaScript to convert the form into JSON: &#x60;&#x60;&#x60;html &lt;!- -form for user interaction- -&gt; &lt;form name&#x3D;\&quot;videoUploadForm\&quot; &gt;   &lt;label for&#x3D;video&gt;Video:&lt;/label&gt;   &lt;input type&#x3D;file name&#x3D;source/&gt;&lt;br/&gt;   &lt;input value&#x3D;\&quot;Submit\&quot; type&#x3D;\&quot;submit\&quot;&gt; &lt;/form&gt; &lt;div&gt;&lt;/div&gt; &lt;!- -JS takes the form data      uses FormData to turn the response into JSON.     then uses POST to upload the video file.     Update the token parameter in the url to your upload token.     - -&gt; &lt;script&gt;    var form &#x3D; document.forms.namedItem(\&quot;videoUploadForm\&quot;);     form.addEventListener(&#39;submit&#39;, function(ev) {   ev.preventDefault();      var oOutput &#x3D; document.querySelector(\&quot;div\&quot;),          oData &#x3D; new FormData(form);      var oReq &#x3D; new XMLHttpRequest();         oReq.open(\&quot;POST\&quot;, \&quot;https://ws.api.video/upload?token&#x3D;toXXX\&quot;, true);      oReq.send(oData);   oReq.onload &#x3D; function(oEvent) {        if (oReq.status &#x3D;&#x3D;201) {          oOutput.innerHTML &#x3D; \&quot;Your video is uploaded!&lt;br/&gt;\&quot;  + oReq.response;        } else {          oOutput.innerHTML &#x3D; \&quot;Error \&quot; + oReq.status + \&quot; occurred when trying to upload your file.&lt;br /&gt;\&quot;;        }      };    }, false);  &lt;/script&gt; &#x60;&#x60;&#x60;   ### Dealing with large files  We have created a &lt;a href&#x3D;&#39;https://api.video/blog/tutorials/uploading-large-files-with-javascript&#39;&gt;tutorial&lt;/a&gt; to walk through the steps required.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The unique identifier for the token you want to use to upload a video.</param>
/// <param name="file">The path to the video you want to upload.</param>
        /// <param name="progressListener">Progress listener called after each chunk upload</param>
        /// <returns>Video</returns>
		public Video upload(string token, System.IO.Stream file,IUploadProgressListener progressListener = null)
        {
             ApiResponse<Video> localVarResponse = uploadWithHttpInfo(token, file,progressListener);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload with an upload token When given a token, anyone can upload a file to the URI &#x60;https://ws.api.video/upload?token&#x3D;&lt;tokenId&gt;&#x60;.  Example with cURL:  &#x60;&#x60;&#x60;curl $ curl  - -request POST - -url &#39;https://ws.api.video/upload?token&#x3D;toXXX&#39;  - -header &#39;content-type: multipart/form-data&#39;  -F file&#x3D;@video.mp4 &#x60;&#x60;&#x60;  Or in an HTML form, with a little JavaScript to convert the form into JSON: &#x60;&#x60;&#x60;html &lt;!- -form for user interaction- -&gt; &lt;form name&#x3D;\&quot;videoUploadForm\&quot; &gt;   &lt;label for&#x3D;video&gt;Video:&lt;/label&gt;   &lt;input type&#x3D;file name&#x3D;source/&gt;&lt;br/&gt;   &lt;input value&#x3D;\&quot;Submit\&quot; type&#x3D;\&quot;submit\&quot;&gt; &lt;/form&gt; &lt;div&gt;&lt;/div&gt; &lt;!- -JS takes the form data      uses FormData to turn the response into JSON.     then uses POST to upload the video file.     Update the token parameter in the url to your upload token.     - -&gt; &lt;script&gt;    var form &#x3D; document.forms.namedItem(\&quot;videoUploadForm\&quot;);     form.addEventListener(&#39;submit&#39;, function(ev) {   ev.preventDefault();      var oOutput &#x3D; document.querySelector(\&quot;div\&quot;),          oData &#x3D; new FormData(form);      var oReq &#x3D; new XMLHttpRequest();         oReq.open(\&quot;POST\&quot;, \&quot;https://ws.api.video/upload?token&#x3D;toXXX\&quot;, true);      oReq.send(oData);   oReq.onload &#x3D; function(oEvent) {        if (oReq.status &#x3D;&#x3D;201) {          oOutput.innerHTML &#x3D; \&quot;Your video is uploaded!&lt;br/&gt;\&quot;  + oReq.response;        } else {          oOutput.innerHTML &#x3D; \&quot;Error \&quot; + oReq.status + \&quot; occurred when trying to upload your file.&lt;br /&gt;\&quot;;        }      };    }, false);  &lt;/script&gt; &#x60;&#x60;&#x60;   ### Dealing with large files  We have created a &lt;a href&#x3D;&#39;https://api.video/blog/tutorials/uploading-large-files-with-javascript&#39;&gt;tutorial&lt;/a&gt; to walk through the steps required.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The unique identifier for the token you want to use to upload a video.</param>
/// <param name="file">The path to the video you want to upload.</param>
        /// <param name="progressListener">Progress listener called after each chunk upload</param>
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> uploadWithHttpInfo(string token, System.IO.Stream file,IUploadProgressListener progressListener = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling VideosDelegatedUploadApi->upload");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling VideosDelegatedUploadApi->upload");

            
            long totalBytes = file.Length;
            int chunkSize = Convert.ToInt32(this.ApiClient.UploadChunkSize);

            var localVarPath = "/upload";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            

            if (totalBytes > chunkSize)
            {
                ApiResponse<Video> lastRes = null;
                localVarHeaderParams.Add("Content-Range", "");
                var chunkNum = 0;
                int chunkCount = (int)Math.Ceiling((double)totalBytes / (double)chunkSize);
                for (int i = 0; i < totalBytes; i += chunkSize)
                {
                    chunkNum++;
                    byte[] buffer = new byte[chunkSize];
                    localVarHeaderParams["Content-Range"] = "bytes " + i + "-" + (Math.Min(i+chunkSize,totalBytes)-1) + "/" + totalBytes;
                    
                    file.Read(buffer, 0, chunkSize);

                    if(buffer != null)
                    {
                        if(localVarFileParams.ContainsKey("file"))
                        {
                            localVarFileParams["file"] = this.ApiClient.ParameterToFile("file", file, buffer);
                        }
                        else
                        {
                            localVarFileParams.Add("file",this.ApiClient.ParameterToFile("file", file, buffer));
                        }
                    }
                    
                    // make the HTTP request
                    IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                        Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                        localVarPathParams, localVarContentType);

                    int localVarStatusCode = (int)localVarResponse.StatusCode;
                    lastRes = new ApiResponse<Video>(localVarStatusCode,
                        localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                        (Video)this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
                    
                    if(progressListener != null)
                    {
                        progressListener.onProgress(Math.Min(i + chunkSize, totalBytes), totalBytes, chunkCount, chunkNum);
                    }
                }
                return lastRes;
            }
            else{

            
            if (file != null) 
                localVarFileParams.Add("file", this.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
            }
        }

        
        /// <summary>
        /// Generate an upload token Use this endpoint to generate an upload token. You can use this token to authenticate video uploads while keeping your API key safe.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenCreatePayload"> (optional)</param>
        
        /// <returns>UploadToken</returns>
		public UploadToken createToken(TokenCreatePayload tokenCreatePayload = default)
        {
             ApiResponse<UploadToken> localVarResponse = createTokenWithHttpInfo(tokenCreatePayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate an upload token Use this endpoint to generate an upload token. You can use this token to authenticate video uploads while keeping your API key safe.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenCreatePayload"> (optional)</param>
        
        /// <returns>ApiResponse of UploadToken</returns>
		public ApiResponse<UploadToken> createTokenWithHttpInfo(TokenCreatePayload tokenCreatePayload = default)
        {

            

            var localVarPath = "/upload-tokens";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenCreatePayload != null && tokenCreatePayload.GetType() != typeof(byte[]) && tokenCreatePayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(tokenCreatePayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenCreatePayload; // byte array
            }


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<UploadToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadToken) this.ApiClient.Deserialize(localVarResponse, typeof(UploadToken)));
            
        }

        

    }

}
