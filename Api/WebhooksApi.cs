/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using VideoApiClient.Client;
using VideoApiClient.Model;

namespace VideoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WebhooksApi
    {
        /// <summary>
        /// Api Client Instance
        /// </summary>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Delete a Webhook This endpoint will delete the indicated webhook.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook you wish to delete.</param>
        /// <returns></returns>
		public void delete(string webhookId)
        {
             deleteWithHttpInfo(webhookId);
        }

        /// <summary>
        /// Delete a Webhook This endpoint will delete the indicated webhook.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook you wish to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> deleteWithHttpInfo(string webhookId)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->delete");

            var localVarPath = "/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.ApiClient.ParameterToString(webhookId)); // path parameter

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }
        /// <summary>
        /// Show Webhook details This call provides the same JSON information provided on Webjhook creation.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The unique webhook you wish to retreive details on.</param>
        /// <returns>Webhook</returns>
		public Webhook get(string webhookId)
        {
             ApiResponse<Webhook> localVarResponse = getWithHttpInfo(webhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show Webhook details This call provides the same JSON information provided on Webjhook creation.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The unique webhook you wish to retreive details on.</param>
        /// <returns>ApiResponse of Webhook</returns>
		public ApiResponse<Webhook> getWithHttpInfo(string webhookId)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->get");

            var localVarPath = "/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.ApiClient.ParameterToString(webhookId)); // path parameter

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Webhook) this.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }
        /// <summary>
        /// List all webhooks Requests to this endpoint return a list of your webhooks (with all their details). You can filter what the webhook list that the API returns using the parameters described below.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="events">The webhook event that you wish to filter on. (optional)</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>WebhooksListResponse</returns>
		public WebhooksListResponse list(string events = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<WebhooksListResponse> localVarResponse = listWithHttpInfo(events, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all webhooks Requests to this endpoint return a list of your webhooks (with all their details). You can filter what the webhook list that the API returns using the parameters described below.
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="events">The webhook event that you wish to filter on. (optional)</param>
        /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
        /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        /// <returns>ApiResponse of WebhooksListResponse</returns>
		public ApiResponse<WebhooksListResponse> listWithHttpInfo(string events = default, int? currentPage = default, int? pageSize = default)
        {

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (events != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "events", events)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<WebhooksListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhooksListResponse) this.ApiClient.Deserialize(localVarResponse, typeof(WebhooksListResponse)));
        }
        /// <summary>
        /// Create Webhook Webhooks can push notifications to your server, rather than polling api.video for changes
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksCreatePayload"> (optional)</param>
        /// <returns>Webhook</returns>
		public Webhook create(WebhooksCreatePayload webhooksCreatePayload = default)
        {
             ApiResponse<Webhook> localVarResponse = createWithHttpInfo(webhooksCreatePayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Webhook Webhooks can push notifications to your server, rather than polling api.video for changes
        /// </summary>
        /// <exception cref="VideoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksCreatePayload"> (optional)</param>
        /// <returns>ApiResponse of Webhook</returns>
		public ApiResponse<Webhook> createWithHttpInfo(WebhooksCreatePayload webhooksCreatePayload = default)
        {

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhooksCreatePayload != null && webhooksCreatePayload.GetType() != typeof(byte[]) && webhooksCreatePayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(webhooksCreatePayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhooksCreatePayload; // byte array
            }

            string[] localVarAuthNames = new string[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Webhook) this.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }
    }
}
