/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.IO;
using ApiVideo.Upload;
using RestSharp;
using ApiVideo.Client;
using ApiVideo.Model;

namespace ApiVideo.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AnalyticsApi
    {
        /// <summary>
        /// Api Client Instance
        /// </summary>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalyticsApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Get play events for live stream Retrieve filtered analytics about the number of plays for your live streams in a project.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Use this query parameter to set the start date for the time period that you want analytics for. - The API returns analytics data including the day you set in &#x60;from&#x60;. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format. </param>
/// <param name="dimension">Use this query parameter to define the dimension that you want analytics for. - &#x60;liveStreamId&#x60;: Returns analytics based on the public live stream identifiers. - &#x60;emittedAt&#x60;: Returns analytics based on the times of the play events. The API returns data in specific interval groups. When the date period you set in &#x60;from&#x60; and &#x60;to&#x60; is less than or equals to 2 days, the response for this dimension is grouped in hourly intervals. Otherwise, it is grouped in daily intervals. - &#x60;country&#x60;: Returns analytics based on the viewers&#39; country. The list of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/). - &#x60;deviceType&#x60;: Returns analytics based on the type of device used by the viewers during the play event. Possible response values are: &#x60;computer&#x60;, &#x60;phone&#x60;, &#x60;tablet&#x60;, &#x60;tv&#x60;, &#x60;console&#x60;, &#x60;wearable&#x60;, &#x60;unknown&#x60;. - &#x60;operatingSystem&#x60;: Returns analytics based on the operating system used by the viewers during the play event. Response values include &#x60;windows&#x60;, &#x60;mac osx&#x60;, &#x60;android&#x60;, &#x60;ios&#x60;, &#x60;linux&#x60;. - &#x60;browser&#x60;: Returns analytics based on the browser used by the viewers during the play event. Response values include &#x60;chrome&#x60;, &#x60;firefox&#x60;, &#x60;edge&#x60;, &#x60;opera&#x60;.</param>
/// <param name="to">Use this optional query parameter to set the end date for the time period that you want analytics for. - If you do not specify a &#x60;to&#x60; date, the API returns analytics data starting from the &#x60;from&#x60; date up until today, and excluding today. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format.  (optional)</param>
/// <param name="filter">Use this query parameter to filter your results to a specific live stream in a project that you want analytics for. You must use the &#x60;liveStreamId:&#x60; prefix when specifying a live stream ID. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>AnalyticsPlaysResponse</returns>
		public AnalyticsPlaysResponse getLiveStreamsPlays(DateTime from, string dimension, DateTime? to = default, string filter = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<AnalyticsPlaysResponse> localVarResponse = getLiveStreamsPlaysWithHttpInfo(from, dimension, to, filter, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get play events for live stream Retrieve filtered analytics about the number of plays for your live streams in a project.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Use this query parameter to set the start date for the time period that you want analytics for. - The API returns analytics data including the day you set in &#x60;from&#x60;. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format. </param>
/// <param name="dimension">Use this query parameter to define the dimension that you want analytics for. - &#x60;liveStreamId&#x60;: Returns analytics based on the public live stream identifiers. - &#x60;emittedAt&#x60;: Returns analytics based on the times of the play events. The API returns data in specific interval groups. When the date period you set in &#x60;from&#x60; and &#x60;to&#x60; is less than or equals to 2 days, the response for this dimension is grouped in hourly intervals. Otherwise, it is grouped in daily intervals. - &#x60;country&#x60;: Returns analytics based on the viewers&#39; country. The list of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/). - &#x60;deviceType&#x60;: Returns analytics based on the type of device used by the viewers during the play event. Possible response values are: &#x60;computer&#x60;, &#x60;phone&#x60;, &#x60;tablet&#x60;, &#x60;tv&#x60;, &#x60;console&#x60;, &#x60;wearable&#x60;, &#x60;unknown&#x60;. - &#x60;operatingSystem&#x60;: Returns analytics based on the operating system used by the viewers during the play event. Response values include &#x60;windows&#x60;, &#x60;mac osx&#x60;, &#x60;android&#x60;, &#x60;ios&#x60;, &#x60;linux&#x60;. - &#x60;browser&#x60;: Returns analytics based on the browser used by the viewers during the play event. Response values include &#x60;chrome&#x60;, &#x60;firefox&#x60;, &#x60;edge&#x60;, &#x60;opera&#x60;.</param>
/// <param name="to">Use this optional query parameter to set the end date for the time period that you want analytics for. - If you do not specify a &#x60;to&#x60; date, the API returns analytics data starting from the &#x60;from&#x60; date up until today, and excluding today. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format.  (optional)</param>
/// <param name="filter">Use this query parameter to filter your results to a specific live stream in a project that you want analytics for. You must use the &#x60;liveStreamId:&#x60; prefix when specifying a live stream ID. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of AnalyticsPlaysResponse</returns>
		public ApiResponse<AnalyticsPlaysResponse> getLiveStreamsPlaysWithHttpInfo(DateTime from, string dimension, DateTime? to = default, string filter = default, int? currentPage = default, int? pageSize = default)
        {






            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling AnalyticsApi->getLiveStreamsPlays");
            // verify the required parameter 'dimension' is set
            if (dimension == null)
                throw new ApiException(400, "Missing required parameter 'dimension' when calling AnalyticsApi->getLiveStreamsPlays");
            

            var localVarPath = "/analytics/live-streams/plays";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (dimension != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "dimension", dimension)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<AnalyticsPlaysResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnalyticsPlaysResponse) this.ApiClient.Deserialize(localVarResponse, typeof(AnalyticsPlaysResponse)));
            
        }

        
        /// <summary>
        /// Retrieve filtered analytics about the number of plays for your live streams in a project.
        /// </summary>
        /// <param name="from">Use this query parameter to set the start date for the time period that you want analytics for. - The API returns analytics data including the day you set in &#x60;from&#x60;. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format.  (required)</param>
        /// <param name="dimension">Use this query parameter to define the dimension that you want analytics for. - &#x60;liveStreamId&#x60;: Returns analytics based on the public live stream identifiers. - &#x60;emittedAt&#x60;: Returns analytics based on the times of the play events. The API returns data in specific interval groups. When the date period you set in &#x60;from&#x60; and &#x60;to&#x60; is less than or equals to 2 days, the response for this dimension is grouped in hourly intervals. Otherwise, it is grouped in daily intervals. - &#x60;country&#x60;: Returns analytics based on the viewers&#39; country. The list of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/). - &#x60;deviceType&#x60;: Returns analytics based on the type of device used by the viewers during the play event. Possible response values are: &#x60;computer&#x60;, &#x60;phone&#x60;, &#x60;tablet&#x60;, &#x60;tv&#x60;, &#x60;console&#x60;, &#x60;wearable&#x60;, &#x60;unknown&#x60;. - &#x60;operatingSystem&#x60;: Returns analytics based on the operating system used by the viewers during the play event. Response values include &#x60;windows&#x60;, &#x60;mac osx&#x60;, &#x60;android&#x60;, &#x60;ios&#x60;, &#x60;linux&#x60;. - &#x60;browser&#x60;: Returns analytics based on the browser used by the viewers during the play event. Response values include &#x60;chrome&#x60;, &#x60;firefox&#x60;, &#x60;edge&#x60;, &#x60;opera&#x60;. (required)</param>
        /// <returns>APIgetLiveStreamsPlaysRequest</returns>
        public APIgetLiveStreamsPlaysRequest getLiveStreamsPlays(DateTime from, string dimension) {
            return new APIgetLiveStreamsPlaysRequest(this,from, dimension);
        }

        /// <summary>
        /// Request getLiveStreamsPlays class to get paginated list of items
        /// </summary>
        public class APIgetLiveStreamsPlaysRequest {
            private DateTime from;
            private string dimension;
            private DateTime? to;
            private string filter;
            private int? currentPage;
            private int? pageSize;

            private AnalyticsApi currentApiInstance;

            /// <summary>
            /// Class constructor with api instance
            /// </summary>
            /// <param name="instance">Instance of the current api</param>
            /// <param name="from">Use this query parameter to set the start date for the time period that you want analytics for. - The API returns analytics data including the day you set in &#x60;from&#x60;. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format.  (required)</param>
            /// <param name="dimension">Use this query parameter to define the dimension that you want analytics for. - &#x60;liveStreamId&#x60;: Returns analytics based on the public live stream identifiers. - &#x60;emittedAt&#x60;: Returns analytics based on the times of the play events. The API returns data in specific interval groups. When the date period you set in &#x60;from&#x60; and &#x60;to&#x60; is less than or equals to 2 days, the response for this dimension is grouped in hourly intervals. Otherwise, it is grouped in daily intervals. - &#x60;country&#x60;: Returns analytics based on the viewers&#39; country. The list of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/). - &#x60;deviceType&#x60;: Returns analytics based on the type of device used by the viewers during the play event. Possible response values are: &#x60;computer&#x60;, &#x60;phone&#x60;, &#x60;tablet&#x60;, &#x60;tv&#x60;, &#x60;console&#x60;, &#x60;wearable&#x60;, &#x60;unknown&#x60;. - &#x60;operatingSystem&#x60;: Returns analytics based on the operating system used by the viewers during the play event. Response values include &#x60;windows&#x60;, &#x60;mac osx&#x60;, &#x60;android&#x60;, &#x60;ios&#x60;, &#x60;linux&#x60;. - &#x60;browser&#x60;: Returns analytics based on the browser used by the viewers during the play event. Response values include &#x60;chrome&#x60;, &#x60;firefox&#x60;, &#x60;edge&#x60;, &#x60;opera&#x60;. (required)</param>
            public APIgetLiveStreamsPlaysRequest(AnalyticsApi instance, DateTime from, string dimension) {
                this.from = from;
                this.dimension = dimension;
                this.currentApiInstance = instance;
            }

            /// <summary>
            /// Set to
            /// </summary>
            /// <param name="to">Use this optional query parameter to set the end date for the time period that you want analytics for. - If you do not specify a &#x60;to&#x60; date, the API returns analytics data starting from the &#x60;from&#x60; date up until today, and excluding today. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format.  (optional)</param>
            /// <returns>APIgetLiveStreamsPlaysRequest</returns>
            public APIgetLiveStreamsPlaysRequest To(DateTime? to) {
                this.to = to;
                return this;
            }

            /// <summary>
            /// Set filter
            /// </summary>
            /// <param name="filter">Use this query parameter to filter your results to a specific live stream in a project that you want analytics for. You must use the &#x60;liveStreamId:&#x60; prefix when specifying a live stream ID. (optional)</param>
            /// <returns>APIgetLiveStreamsPlaysRequest</returns>
            public APIgetLiveStreamsPlaysRequest Filter(string filter) {
                this.filter = filter;
                return this;
            }

            /// <summary>
            /// Set currentPage
            /// </summary>
            /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
            /// <returns>APIgetLiveStreamsPlaysRequest</returns>
            public APIgetLiveStreamsPlaysRequest CurrentPage(int? currentPage) {
                this.currentPage = currentPage;
                return this;
            }

            /// <summary>
            /// Set pageSize
            /// </summary>
            /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
            /// <returns>APIgetLiveStreamsPlaysRequest</returns>
            public APIgetLiveStreamsPlaysRequest PageSize(int? pageSize) {
                this.pageSize = pageSize;
                return this;
            }

            

            /// <summary>
            /// Execute getLiveStreamsPlays request
            /// </summary>
            /// <returns>AnalyticsPlaysResponse </returns>
            public Page<AnalyticsData> execute(){
                ApiResponse<AnalyticsPlaysResponse> localVarResp = this.currentApiInstance.getLiveStreamsPlaysWithHttpInfo(from, dimension, to, filter, currentPage, pageSize);
                return new Page<AnalyticsData>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                    try {
                        return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                    } catch (ApiException e) {
                        throw new Exception(e.Message);
                    }
                }); 
            }

            private APIgetLiveStreamsPlaysRequest copy() {
                APIgetLiveStreamsPlaysRequest copy = new APIgetLiveStreamsPlaysRequest( this.currentApiInstance, from, dimension);
                copy.To(to);
                copy.Filter(filter);
                copy.CurrentPage(currentPage);
                copy.PageSize(pageSize);
                return copy;
            }
        }
        /// <summary>
        /// Get play events for video Retrieve filtered analytics about the number of plays for your videos in a project.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Use this query parameter to set the start date for the time period that you want analytics for. - The API returns analytics data including the day you set in &#x60;from&#x60;. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format. </param>
/// <param name="dimension">Use this query parameter to define the dimension that you want analytics for. - &#x60;videoId&#x60;: Returns analytics based on the public video identifiers. - &#x60;emittedAt&#x60;: Returns analytics based on the times of the play events. The API returns data in specific interval groups. When the date period you set in &#x60;from&#x60; and &#x60;to&#x60; is less than or equals to 2 days, the response for this dimension is grouped in hourly intervals. Otherwise, it is grouped in daily intervals. - &#x60;country&#x60;: Returns analytics based on the viewers&#39; country. The list of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/). - &#x60;deviceType&#x60;: Returns analytics based on the type of device used by the viewers during the play event. Possible response values are: &#x60;computer&#x60;, &#x60;phone&#x60;, &#x60;tablet&#x60;, &#x60;tv&#x60;, &#x60;console&#x60;, &#x60;wearable&#x60;, &#x60;unknown&#x60;. - &#x60;operatingSystem&#x60;: Returns analytics based on the operating system used by the viewers during the play event. Response values include &#x60;windows&#x60;, &#x60;mac osx&#x60;, &#x60;android&#x60;, &#x60;ios&#x60;, &#x60;linux&#x60;. - &#x60;browser&#x60;: Returns analytics based on the browser used by the viewers during the play event. Response values include &#x60;chrome&#x60;, &#x60;firefox&#x60;, &#x60;edge&#x60;, &#x60;opera&#x60;.</param>
/// <param name="to">Use this optional query parameter to set the end date for the time period that you want analytics for. - If you do not specify a &#x60;to&#x60; date, the API returns analytics data starting from the &#x60;from&#x60; date up until today, and excluding today. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format.  (optional)</param>
/// <param name="filter">Use this query parameter to filter your results to a specific video in a project that you want analytics for. You must use the &#x60;videoId:&#x60; prefix when specifying a video ID. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>AnalyticsPlaysResponse</returns>
		public AnalyticsPlaysResponse getVideosPlays(DateTime from, string dimension, DateTime? to = default, string filter = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<AnalyticsPlaysResponse> localVarResponse = getVideosPlaysWithHttpInfo(from, dimension, to, filter, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get play events for video Retrieve filtered analytics about the number of plays for your videos in a project.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Use this query parameter to set the start date for the time period that you want analytics for. - The API returns analytics data including the day you set in &#x60;from&#x60;. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format. </param>
/// <param name="dimension">Use this query parameter to define the dimension that you want analytics for. - &#x60;videoId&#x60;: Returns analytics based on the public video identifiers. - &#x60;emittedAt&#x60;: Returns analytics based on the times of the play events. The API returns data in specific interval groups. When the date period you set in &#x60;from&#x60; and &#x60;to&#x60; is less than or equals to 2 days, the response for this dimension is grouped in hourly intervals. Otherwise, it is grouped in daily intervals. - &#x60;country&#x60;: Returns analytics based on the viewers&#39; country. The list of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/). - &#x60;deviceType&#x60;: Returns analytics based on the type of device used by the viewers during the play event. Possible response values are: &#x60;computer&#x60;, &#x60;phone&#x60;, &#x60;tablet&#x60;, &#x60;tv&#x60;, &#x60;console&#x60;, &#x60;wearable&#x60;, &#x60;unknown&#x60;. - &#x60;operatingSystem&#x60;: Returns analytics based on the operating system used by the viewers during the play event. Response values include &#x60;windows&#x60;, &#x60;mac osx&#x60;, &#x60;android&#x60;, &#x60;ios&#x60;, &#x60;linux&#x60;. - &#x60;browser&#x60;: Returns analytics based on the browser used by the viewers during the play event. Response values include &#x60;chrome&#x60;, &#x60;firefox&#x60;, &#x60;edge&#x60;, &#x60;opera&#x60;.</param>
/// <param name="to">Use this optional query parameter to set the end date for the time period that you want analytics for. - If you do not specify a &#x60;to&#x60; date, the API returns analytics data starting from the &#x60;from&#x60; date up until today, and excluding today. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format.  (optional)</param>
/// <param name="filter">Use this query parameter to filter your results to a specific video in a project that you want analytics for. You must use the &#x60;videoId:&#x60; prefix when specifying a video ID. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of AnalyticsPlaysResponse</returns>
		public ApiResponse<AnalyticsPlaysResponse> getVideosPlaysWithHttpInfo(DateTime from, string dimension, DateTime? to = default, string filter = default, int? currentPage = default, int? pageSize = default)
        {






            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling AnalyticsApi->getVideosPlays");
            // verify the required parameter 'dimension' is set
            if (dimension == null)
                throw new ApiException(400, "Missing required parameter 'dimension' when calling AnalyticsApi->getVideosPlays");
            

            var localVarPath = "/analytics/videos/plays";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (dimension != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "dimension", dimension)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<AnalyticsPlaysResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnalyticsPlaysResponse) this.ApiClient.Deserialize(localVarResponse, typeof(AnalyticsPlaysResponse)));
            
        }

        
        /// <summary>
        /// Retrieve filtered analytics about the number of plays for your videos in a project.
        /// </summary>
        /// <param name="from">Use this query parameter to set the start date for the time period that you want analytics for. - The API returns analytics data including the day you set in &#x60;from&#x60;. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format.  (required)</param>
        /// <param name="dimension">Use this query parameter to define the dimension that you want analytics for. - &#x60;videoId&#x60;: Returns analytics based on the public video identifiers. - &#x60;emittedAt&#x60;: Returns analytics based on the times of the play events. The API returns data in specific interval groups. When the date period you set in &#x60;from&#x60; and &#x60;to&#x60; is less than or equals to 2 days, the response for this dimension is grouped in hourly intervals. Otherwise, it is grouped in daily intervals. - &#x60;country&#x60;: Returns analytics based on the viewers&#39; country. The list of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/). - &#x60;deviceType&#x60;: Returns analytics based on the type of device used by the viewers during the play event. Possible response values are: &#x60;computer&#x60;, &#x60;phone&#x60;, &#x60;tablet&#x60;, &#x60;tv&#x60;, &#x60;console&#x60;, &#x60;wearable&#x60;, &#x60;unknown&#x60;. - &#x60;operatingSystem&#x60;: Returns analytics based on the operating system used by the viewers during the play event. Response values include &#x60;windows&#x60;, &#x60;mac osx&#x60;, &#x60;android&#x60;, &#x60;ios&#x60;, &#x60;linux&#x60;. - &#x60;browser&#x60;: Returns analytics based on the browser used by the viewers during the play event. Response values include &#x60;chrome&#x60;, &#x60;firefox&#x60;, &#x60;edge&#x60;, &#x60;opera&#x60;. (required)</param>
        /// <returns>APIgetVideosPlaysRequest</returns>
        public APIgetVideosPlaysRequest getVideosPlays(DateTime from, string dimension) {
            return new APIgetVideosPlaysRequest(this,from, dimension);
        }

        /// <summary>
        /// Request getVideosPlays class to get paginated list of items
        /// </summary>
        public class APIgetVideosPlaysRequest {
            private DateTime from;
            private string dimension;
            private DateTime? to;
            private string filter;
            private int? currentPage;
            private int? pageSize;

            private AnalyticsApi currentApiInstance;

            /// <summary>
            /// Class constructor with api instance
            /// </summary>
            /// <param name="instance">Instance of the current api</param>
            /// <param name="from">Use this query parameter to set the start date for the time period that you want analytics for. - The API returns analytics data including the day you set in &#x60;from&#x60;. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format.  (required)</param>
            /// <param name="dimension">Use this query parameter to define the dimension that you want analytics for. - &#x60;videoId&#x60;: Returns analytics based on the public video identifiers. - &#x60;emittedAt&#x60;: Returns analytics based on the times of the play events. The API returns data in specific interval groups. When the date period you set in &#x60;from&#x60; and &#x60;to&#x60; is less than or equals to 2 days, the response for this dimension is grouped in hourly intervals. Otherwise, it is grouped in daily intervals. - &#x60;country&#x60;: Returns analytics based on the viewers&#39; country. The list of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/). - &#x60;deviceType&#x60;: Returns analytics based on the type of device used by the viewers during the play event. Possible response values are: &#x60;computer&#x60;, &#x60;phone&#x60;, &#x60;tablet&#x60;, &#x60;tv&#x60;, &#x60;console&#x60;, &#x60;wearable&#x60;, &#x60;unknown&#x60;. - &#x60;operatingSystem&#x60;: Returns analytics based on the operating system used by the viewers during the play event. Response values include &#x60;windows&#x60;, &#x60;mac osx&#x60;, &#x60;android&#x60;, &#x60;ios&#x60;, &#x60;linux&#x60;. - &#x60;browser&#x60;: Returns analytics based on the browser used by the viewers during the play event. Response values include &#x60;chrome&#x60;, &#x60;firefox&#x60;, &#x60;edge&#x60;, &#x60;opera&#x60;. (required)</param>
            public APIgetVideosPlaysRequest(AnalyticsApi instance, DateTime from, string dimension) {
                this.from = from;
                this.dimension = dimension;
                this.currentApiInstance = instance;
            }

            /// <summary>
            /// Set to
            /// </summary>
            /// <param name="to">Use this optional query parameter to set the end date for the time period that you want analytics for. - If you do not specify a &#x60;to&#x60; date, the API returns analytics data starting from the &#x60;from&#x60; date up until today, and excluding today. - The date you set must be **within the last 30 days**. - The value you provide must follow the &#x60;YYYY-MM-DD&#x60; format.  (optional)</param>
            /// <returns>APIgetVideosPlaysRequest</returns>
            public APIgetVideosPlaysRequest To(DateTime? to) {
                this.to = to;
                return this;
            }

            /// <summary>
            /// Set filter
            /// </summary>
            /// <param name="filter">Use this query parameter to filter your results to a specific video in a project that you want analytics for. You must use the &#x60;videoId:&#x60; prefix when specifying a video ID. (optional)</param>
            /// <returns>APIgetVideosPlaysRequest</returns>
            public APIgetVideosPlaysRequest Filter(string filter) {
                this.filter = filter;
                return this;
            }

            /// <summary>
            /// Set currentPage
            /// </summary>
            /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
            /// <returns>APIgetVideosPlaysRequest</returns>
            public APIgetVideosPlaysRequest CurrentPage(int? currentPage) {
                this.currentPage = currentPage;
                return this;
            }

            /// <summary>
            /// Set pageSize
            /// </summary>
            /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
            /// <returns>APIgetVideosPlaysRequest</returns>
            public APIgetVideosPlaysRequest PageSize(int? pageSize) {
                this.pageSize = pageSize;
                return this;
            }

            

            /// <summary>
            /// Execute getVideosPlays request
            /// </summary>
            /// <returns>AnalyticsPlaysResponse </returns>
            public Page<AnalyticsData> execute(){
                ApiResponse<AnalyticsPlaysResponse> localVarResp = this.currentApiInstance.getVideosPlaysWithHttpInfo(from, dimension, to, filter, currentPage, pageSize);
                return new Page<AnalyticsData>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                    try {
                        return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                    } catch (ApiException e) {
                        throw new Exception(e.Message);
                    }
                }); 
            }

            private APIgetVideosPlaysRequest copy() {
                APIgetVideosPlaysRequest copy = new APIgetVideosPlaysRequest( this.currentApiInstance, from, dimension);
                copy.To(to);
                copy.Filter(filter);
                copy.CurrentPage(currentPage);
                copy.PageSize(pageSize);
                return copy;
            }
        }

    }

}
