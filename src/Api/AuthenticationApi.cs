/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.IO;
using ApiVideo.Upload;
using RestSharp;
using ApiVideo.Client;
using ApiVideo.Model;

namespace ApiVideo.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AuthenticationApi
    {
        /// <summary>
        /// Api Client Instance
        /// </summary>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Authenticate To get started, submit your API key in the body of your request. api.video returns an access token that is valid for one hour (3600 seconds). A refresh token is also returned. View a [tutorial](https://api.video/blog/tutorials/authentication-tutorial) on authentication.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatePayload"></param>
        
        /// <returns>AccessToken</returns>
		public AccessToken authenticate(AuthenticatePayload authenticatePayload)
        {
             ApiResponse<AccessToken> localVarResponse = authenticateWithHttpInfo(authenticatePayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate To get started, submit your API key in the body of your request. api.video returns an access token that is valid for one hour (3600 seconds). A refresh token is also returned. View a [tutorial](https://api.video/blog/tutorials/authentication-tutorial) on authentication.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatePayload"></param>
        
        /// <returns>ApiResponse of AccessToken</returns>
		public ApiResponse<AccessToken> authenticateWithHttpInfo(AuthenticatePayload authenticatePayload)
        {
            if (authenticatePayload == null) 
                throw new ApiException(400,"Missing required parameter 'authenticatePayload' when calling AuthenticationApi->authenticate");
            
            if (authenticatePayload != null && authenticatePayload.apikey == null) {
                throw new ApiException(400,"Missing required parameter 'authenticatePayload.ApiKey' when calling AuthenticationApi->authenticate");
            }
            
            // verify the required parameter 'authenticatePayload' is set
            if (authenticatePayload == null)
                throw new ApiException(400, "Missing required parameter 'authenticatePayload' when calling AuthenticationApi->authenticate");
            

            var localVarPath = "/auth/api-key";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticatePayload != null && authenticatePayload.GetType() != typeof(byte[]) && authenticatePayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(authenticatePayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authenticatePayload; // byte array
            }


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<AccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessToken) this.ApiClient.Deserialize(localVarResponse, typeof(AccessToken)));
            
        }

        
        /// <summary>
        /// Refresh token Use the refresh endpoint with the refresh token you received when you first authenticated using the api-key endpoint. Send the refresh token in the body of your request. The api.video API returns a new access token that is valid for one hour (3600 seconds) and a new refresh token. 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenPayload"></param>
        
        /// <returns>AccessToken</returns>
		public AccessToken refresh(RefreshTokenPayload refreshTokenPayload)
        {
             ApiResponse<AccessToken> localVarResponse = refreshWithHttpInfo(refreshTokenPayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh token Use the refresh endpoint with the refresh token you received when you first authenticated using the api-key endpoint. Send the refresh token in the body of your request. The api.video API returns a new access token that is valid for one hour (3600 seconds) and a new refresh token. 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenPayload"></param>
        
        /// <returns>ApiResponse of AccessToken</returns>
		public ApiResponse<AccessToken> refreshWithHttpInfo(RefreshTokenPayload refreshTokenPayload)
        {
            if (refreshTokenPayload == null) 
                throw new ApiException(400,"Missing required parameter 'refreshTokenPayload' when calling AuthenticationApi->refresh");
            
            if (refreshTokenPayload != null && refreshTokenPayload.refreshtoken == null) {
                throw new ApiException(400,"Missing required parameter 'refreshTokenPayload.RefreshToken' when calling AuthenticationApi->refresh");
            }
            
            // verify the required parameter 'refreshTokenPayload' is set
            if (refreshTokenPayload == null)
                throw new ApiException(400, "Missing required parameter 'refreshTokenPayload' when calling AuthenticationApi->refresh");
            

            var localVarPath = "/auth/refresh";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (refreshTokenPayload != null && refreshTokenPayload.GetType() != typeof(byte[]) && refreshTokenPayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(refreshTokenPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = refreshTokenPayload; // byte array
            }


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<AccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessToken) this.ApiClient.Deserialize(localVarResponse, typeof(AccessToken)));
            
        }

        

    }

}
