/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.IO;
using ApiVideo.Upload;
using RestSharp;
using ApiVideo.Client;
using ApiVideo.Model;

namespace ApiVideo.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class RawStatisticsApi
    {
        /// <summary>
        /// Api Client Instance
        /// </summary>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="RawStatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RawStatisticsApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// List live stream player sessions 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique identifier for the live stream you want to retrieve analytics for.</param>
/// <param name="period">Period must have one of the following formats:   - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot;  For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot;  (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>RawStatisticsListLiveStreamAnalyticsResponse</returns>
		public RawStatisticsListLiveStreamAnalyticsResponse listLiveStreamSessions(string liveStreamId, string period = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<RawStatisticsListLiveStreamAnalyticsResponse> localVarResponse = listLiveStreamSessionsWithHttpInfo(liveStreamId, period, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List live stream player sessions 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The unique identifier for the live stream you want to retrieve analytics for.</param>
/// <param name="period">Period must have one of the following formats:   - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot;  For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot;  (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of RawStatisticsListLiveStreamAnalyticsResponse</returns>
		public ApiResponse<RawStatisticsListLiveStreamAnalyticsResponse> listLiveStreamSessionsWithHttpInfo(string liveStreamId, string period = default, int? currentPage = default, int? pageSize = default)
        {




            // verify the required parameter 'liveStreamId' is set
            if (liveStreamId == null)
                throw new ApiException(400, "Missing required parameter 'liveStreamId' when calling RawStatisticsApi->listLiveStreamSessions");
            

            var localVarPath = "/analytics/live-streams/{liveStreamId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (liveStreamId != null) localVarPathParams.Add("liveStreamId", this.ApiClient.ParameterToString(liveStreamId)); // path parameter
            if (period != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<RawStatisticsListLiveStreamAnalyticsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RawStatisticsListLiveStreamAnalyticsResponse) this.ApiClient.Deserialize(localVarResponse, typeof(RawStatisticsListLiveStreamAnalyticsResponse)));
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="liveStreamId">The unique identifier for the live stream you want to retrieve analytics for. (required)</param>
        /// <returns>APIlistLiveStreamSessionsRequest</returns>
        public APIlistLiveStreamSessionsRequest listLiveStreamSessions(string liveStreamId) {
            return new APIlistLiveStreamSessionsRequest(this,liveStreamId);
        }

        /// <summary>
        /// Request listLiveStreamSessions class to get paginated list of items
        /// </summary>
        public class APIlistLiveStreamSessionsRequest {
            private string liveStreamId;
            private string period;
            private int? currentPage;
            private int? pageSize;

            private RawStatisticsApi currentApiInstance;

            /// <summary>
            /// Class constructor with api instance
            /// </summary>
            /// <param name="instance">Instance of the current api</param>
            /// <param name="liveStreamId">The unique identifier for the live stream you want to retrieve analytics for. (required)</param>
            public APIlistLiveStreamSessionsRequest(RawStatisticsApi instance, string liveStreamId) {
                this.liveStreamId = liveStreamId;
                this.currentApiInstance = instance;
            }

            /// <summary>
            /// Set period
            /// </summary>
            /// <param name="period">Period must have one of the following formats:   - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot;  For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot;  (optional)</param>
            /// <returns>APIlistLiveStreamSessionsRequest</returns>
            public APIlistLiveStreamSessionsRequest Period(string period) {
                this.period = period;
                return this;
            }

            /// <summary>
            /// Set currentPage
            /// </summary>
            /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
            /// <returns>APIlistLiveStreamSessionsRequest</returns>
            public APIlistLiveStreamSessionsRequest CurrentPage(int? currentPage) {
                this.currentPage = currentPage;
                return this;
            }

            /// <summary>
            /// Set pageSize
            /// </summary>
            /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
            /// <returns>APIlistLiveStreamSessionsRequest</returns>
            public APIlistLiveStreamSessionsRequest PageSize(int? pageSize) {
                this.pageSize = pageSize;
                return this;
            }

            

            /// <summary>
            /// Execute listLiveStreamSessions request
            /// </summary>
            /// <returns>RawStatisticsListLiveStreamAnalyticsResponse </returns>
            public Page<LiveStreamSession> execute(){
                ApiResponse<RawStatisticsListLiveStreamAnalyticsResponse> localVarResp = this.currentApiInstance.listLiveStreamSessionsWithHttpInfo(liveStreamId, period, currentPage, pageSize);
                return new Page<LiveStreamSession>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                    try {
                        return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                    } catch (ApiException e) {
                        throw new Exception(e.Message);
                    }
                }); 
            }

            private APIlistLiveStreamSessionsRequest copy() {
                APIlistLiveStreamSessionsRequest copy = new APIlistLiveStreamSessionsRequest( this.currentApiInstance, liveStreamId);
                copy.Period(period);
                copy.CurrentPage(currentPage);
                copy.PageSize(pageSize);
                return copy;
            }
        }
        /// <summary>
        /// List player session events Useful to track and measure video&#39;s engagement.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">A unique identifier you can use to reference and track a session with.</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>RawStatisticsListPlayerSessionEventsResponse</returns>
		public RawStatisticsListPlayerSessionEventsResponse listSessionEvents(string sessionId, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<RawStatisticsListPlayerSessionEventsResponse> localVarResponse = listSessionEventsWithHttpInfo(sessionId, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List player session events Useful to track and measure video&#39;s engagement.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">A unique identifier you can use to reference and track a session with.</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of RawStatisticsListPlayerSessionEventsResponse</returns>
		public ApiResponse<RawStatisticsListPlayerSessionEventsResponse> listSessionEventsWithHttpInfo(string sessionId, int? currentPage = default, int? pageSize = default)
        {



            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling RawStatisticsApi->listSessionEvents");
            

            var localVarPath = "/analytics/sessions/{sessionId}/events";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.ApiClient.ParameterToString(sessionId)); // path parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<RawStatisticsListPlayerSessionEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RawStatisticsListPlayerSessionEventsResponse) this.ApiClient.Deserialize(localVarResponse, typeof(RawStatisticsListPlayerSessionEventsResponse)));
            
        }

        
        /// <summary>
        /// Useful to track and measure video&#39;s engagement.
        /// </summary>
        /// <param name="sessionId">A unique identifier you can use to reference and track a session with. (required)</param>
        /// <returns>APIlistSessionEventsRequest</returns>
        public APIlistSessionEventsRequest listSessionEvents(string sessionId) {
            return new APIlistSessionEventsRequest(this,sessionId);
        }

        /// <summary>
        /// Request listSessionEvents class to get paginated list of items
        /// </summary>
        public class APIlistSessionEventsRequest {
            private string sessionId;
            private int? currentPage;
            private int? pageSize;

            private RawStatisticsApi currentApiInstance;

            /// <summary>
            /// Class constructor with api instance
            /// </summary>
            /// <param name="instance">Instance of the current api</param>
            /// <param name="sessionId">A unique identifier you can use to reference and track a session with. (required)</param>
            public APIlistSessionEventsRequest(RawStatisticsApi instance, string sessionId) {
                this.sessionId = sessionId;
                this.currentApiInstance = instance;
            }

            /// <summary>
            /// Set currentPage
            /// </summary>
            /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
            /// <returns>APIlistSessionEventsRequest</returns>
            public APIlistSessionEventsRequest CurrentPage(int? currentPage) {
                this.currentPage = currentPage;
                return this;
            }

            /// <summary>
            /// Set pageSize
            /// </summary>
            /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
            /// <returns>APIlistSessionEventsRequest</returns>
            public APIlistSessionEventsRequest PageSize(int? pageSize) {
                this.pageSize = pageSize;
                return this;
            }

            

            /// <summary>
            /// Execute listSessionEvents request
            /// </summary>
            /// <returns>RawStatisticsListPlayerSessionEventsResponse </returns>
            public Page<PlayerSessionEvent> execute(){
                ApiResponse<RawStatisticsListPlayerSessionEventsResponse> localVarResp = this.currentApiInstance.listSessionEventsWithHttpInfo(sessionId, currentPage, pageSize);
                return new Page<PlayerSessionEvent>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                    try {
                        return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                    } catch (ApiException e) {
                        throw new Exception(e.Message);
                    }
                }); 
            }

            private APIlistSessionEventsRequest copy() {
                APIlistSessionEventsRequest copy = new APIlistSessionEventsRequest( this.currentApiInstance, sessionId);
                copy.CurrentPage(currentPage);
                copy.PageSize(pageSize);
                return copy;
            }
        }
        /// <summary>
        /// List video player sessions Retrieve all available user sessions for a specific video.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want to retrieve session information for.</param>
/// <param name="period">Period must have one of the following formats:   - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018  For a range period:  -  Date range: 2018-01-01/2018-01-15  (optional)</param>
/// <param name="metadata">Metadata and Dynamic Metadata filter. Send an array of key value pairs you want to filter sessios with. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>RawStatisticsListSessionsResponse</returns>
		public RawStatisticsListSessionsResponse listVideoSessions(string videoId, string period = default, List<string> metadata = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<RawStatisticsListSessionsResponse> localVarResponse = listVideoSessionsWithHttpInfo(videoId, period, metadata, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List video player sessions Retrieve all available user sessions for a specific video.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want to retrieve session information for.</param>
/// <param name="period">Period must have one of the following formats:   - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018  For a range period:  -  Date range: 2018-01-01/2018-01-15  (optional)</param>
/// <param name="metadata">Metadata and Dynamic Metadata filter. Send an array of key value pairs you want to filter sessios with. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of RawStatisticsListSessionsResponse</returns>
		public ApiResponse<RawStatisticsListSessionsResponse> listVideoSessionsWithHttpInfo(string videoId, string period = default, List<string> metadata = default, int? currentPage = default, int? pageSize = default)
        {





            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling RawStatisticsApi->listVideoSessions");
            

            var localVarPath = "/analytics/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (period != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter
            if (metadata != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("multi", "metadata", metadata)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<RawStatisticsListSessionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RawStatisticsListSessionsResponse) this.ApiClient.Deserialize(localVarResponse, typeof(RawStatisticsListSessionsResponse)));
            
        }

        
        /// <summary>
        /// Retrieve all available user sessions for a specific video.
        /// </summary>
        /// <param name="videoId">The unique identifier for the video you want to retrieve session information for. (required)</param>
        /// <returns>APIlistVideoSessionsRequest</returns>
        public APIlistVideoSessionsRequest listVideoSessions(string videoId) {
            return new APIlistVideoSessionsRequest(this,videoId);
        }

        /// <summary>
        /// Request listVideoSessions class to get paginated list of items
        /// </summary>
        public class APIlistVideoSessionsRequest {
            private string videoId;
            private string period;
            private List<string> metadata;
            private int? currentPage;
            private int? pageSize;

            private RawStatisticsApi currentApiInstance;

            /// <summary>
            /// Class constructor with api instance
            /// </summary>
            /// <param name="instance">Instance of the current api</param>
            /// <param name="videoId">The unique identifier for the video you want to retrieve session information for. (required)</param>
            public APIlistVideoSessionsRequest(RawStatisticsApi instance, string videoId) {
                this.videoId = videoId;
                this.currentApiInstance = instance;
            }

            /// <summary>
            /// Set period
            /// </summary>
            /// <param name="period">Period must have one of the following formats:   - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018  For a range period:  -  Date range: 2018-01-01/2018-01-15  (optional)</param>
            /// <returns>APIlistVideoSessionsRequest</returns>
            public APIlistVideoSessionsRequest Period(string period) {
                this.period = period;
                return this;
            }

            /// <summary>
            /// Set metadata
            /// </summary>
            /// <param name="metadata">Metadata and Dynamic Metadata filter. Send an array of key value pairs you want to filter sessios with. (optional)</param>
            /// <returns>APIlistVideoSessionsRequest</returns>
            public APIlistVideoSessionsRequest Metadata(List<string> metadata) {
                this.metadata = metadata;
                return this;
            }

            /// <summary>
            /// Set currentPage
            /// </summary>
            /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
            /// <returns>APIlistVideoSessionsRequest</returns>
            public APIlistVideoSessionsRequest CurrentPage(int? currentPage) {
                this.currentPage = currentPage;
                return this;
            }

            /// <summary>
            /// Set pageSize
            /// </summary>
            /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
            /// <returns>APIlistVideoSessionsRequest</returns>
            public APIlistVideoSessionsRequest PageSize(int? pageSize) {
                this.pageSize = pageSize;
                return this;
            }

            

            /// <summary>
            /// Execute listVideoSessions request
            /// </summary>
            /// <returns>RawStatisticsListSessionsResponse </returns>
            public Page<VideoSession> execute(){
                ApiResponse<RawStatisticsListSessionsResponse> localVarResp = this.currentApiInstance.listVideoSessionsWithHttpInfo(videoId, period, metadata, currentPage, pageSize);
                return new Page<VideoSession>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                    try {
                        return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                    } catch (ApiException e) {
                        throw new Exception(e.Message);
                    }
                }); 
            }

            private APIlistVideoSessionsRequest copy() {
                APIlistVideoSessionsRequest copy = new APIlistVideoSessionsRequest( this.currentApiInstance, videoId);
                copy.Period(period);
                copy.Metadata(metadata);
                copy.CurrentPage(currentPage);
                copy.PageSize(pageSize);
                return copy;
            }
        }

    }

}
