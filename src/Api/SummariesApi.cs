/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.IO;
using ApiVideo.Upload;
using RestSharp;
using ApiVideo.Client;
using ApiVideo.Model;

namespace ApiVideo.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SummariesApi
    {
        /// <summary>
        /// Api Client Instance
        /// </summary>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="SummariesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SummariesApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Generate video summary Generate a title, abstract, and key takeaways for a video.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="summaryCreationPayload"></param>
        
        /// <returns>Summary</returns>
		public Task<Summary> createAsync(SummaryCreationPayload summaryCreationPayload, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<Summary>> localVarResponse = createWithHttpInfoAsync(summaryCreationPayload, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<Summary>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// Generate video summary Generate a title, abstract, and key takeaways for a video.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summaryCreationPayload"></param>
        
        /// <returns>Summary</returns>
		public Summary create(SummaryCreationPayload summaryCreationPayload)
        {
             ApiResponse<Summary> localVarResponse = createWithHttpInfo(summaryCreationPayload);
             return localVarResponse.Data;
        }


        /// <summary>
        /// Generate video summary Generate a title, abstract, and key takeaways for a video.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="summaryCreationPayload"></param>
        
        /// <returns>ApiResponse of Summary</returns>
		public Task<ApiResponse<Summary>> createWithHttpInfoAsync(SummaryCreationPayload summaryCreationPayload, CancellationToken cancellationToken = default)
        {
            if (summaryCreationPayload == null) 
                throw new ApiException(400,"Missing required parameter 'summaryCreationPayload' when calling SummariesApi->create");
            
            if (summaryCreationPayload != null && summaryCreationPayload.videoid == null) {
                throw new ApiException(400,"Missing required parameter 'summaryCreationPayload.VideoId' when calling SummariesApi->create");
            }
                        
            // verify the required parameter 'summaryCreationPayload' is set
            if (summaryCreationPayload == null)
                throw new ApiException(400, "Missing required parameter 'summaryCreationPayload' when calling SummariesApi->create");
            

            var localVarPath = "/summaries";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (summaryCreationPayload != null && summaryCreationPayload.GetType() != typeof(byte[]) && summaryCreationPayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(summaryCreationPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryCreationPayload; // byte array
            }


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<Summary>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (Summary) this.ApiClient.Deserialize(task.Result, typeof(Summary)));
            });
            
        }


        /// <summary>
        /// Generate video summary Generate a title, abstract, and key takeaways for a video.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summaryCreationPayload"></param>
        
        /// <returns>ApiResponse of Summary</returns>
		public ApiResponse<Summary> createWithHttpInfo(SummaryCreationPayload summaryCreationPayload)
        {
            if (summaryCreationPayload == null) 
                throw new ApiException(400,"Missing required parameter 'summaryCreationPayload' when calling SummariesApi->create");
            
            if (summaryCreationPayload != null && summaryCreationPayload.videoid == null) {
                throw new ApiException(400,"Missing required parameter 'summaryCreationPayload.VideoId' when calling SummariesApi->create");
            }
                        
            // verify the required parameter 'summaryCreationPayload' is set
            if (summaryCreationPayload == null)
                throw new ApiException(400, "Missing required parameter 'summaryCreationPayload' when calling SummariesApi->create");
            

            var localVarPath = "/summaries";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (summaryCreationPayload != null && summaryCreationPayload.GetType() != typeof(byte[]) && summaryCreationPayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(summaryCreationPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryCreationPayload; // byte array
            }


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<Summary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Summary) this.ApiClient.Deserialize(localVarResponse, typeof(Summary)));
            
        }

        
        /// <summary>
        /// Update summary details Update details for a summary. Note that this operation is only allowed for summary objects where &#x60;sourceStatus&#x60; is &#x60;missing&#x60;.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="summaryId">The unique identifier of the summary source you want to update.</param>
/// <param name="summaryUpdatePayload"></param>
        
        /// <returns>SummarySource</returns>
		public Task<SummarySource> updateAsync(string summaryId, SummaryUpdatePayload summaryUpdatePayload, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<SummarySource>> localVarResponse = updateWithHttpInfoAsync(summaryId, summaryUpdatePayload, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<SummarySource>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// Update summary details Update details for a summary. Note that this operation is only allowed for summary objects where &#x60;sourceStatus&#x60; is &#x60;missing&#x60;.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summaryId">The unique identifier of the summary source you want to update.</param>
/// <param name="summaryUpdatePayload"></param>
        
        /// <returns>SummarySource</returns>
		public SummarySource update(string summaryId, SummaryUpdatePayload summaryUpdatePayload)
        {
             ApiResponse<SummarySource> localVarResponse = updateWithHttpInfo(summaryId, summaryUpdatePayload);
             return localVarResponse.Data;
        }


        /// <summary>
        /// Update summary details Update details for a summary. Note that this operation is only allowed for summary objects where &#x60;sourceStatus&#x60; is &#x60;missing&#x60;.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="summaryId">The unique identifier of the summary source you want to update.</param>
/// <param name="summaryUpdatePayload"></param>
        
        /// <returns>ApiResponse of SummarySource</returns>
		public Task<ApiResponse<SummarySource>> updateWithHttpInfoAsync(string summaryId, SummaryUpdatePayload summaryUpdatePayload, CancellationToken cancellationToken = default)
        {
            if (summaryUpdatePayload == null) 
                throw new ApiException(400,"Missing required parameter 'summaryUpdatePayload' when calling SummariesApi->update");
            
                                    
            if (summaryUpdatePayload == null) 
                throw new ApiException(400,"Missing required parameter 'summaryUpdatePayload' when calling SummariesApi->update");
            
                                    
            // verify the required parameter 'summaryId' is set
            if (summaryId == null)
                throw new ApiException(400, "Missing required parameter 'summaryId' when calling SummariesApi->update");
            // verify the required parameter 'summaryUpdatePayload' is set
            if (summaryUpdatePayload == null)
                throw new ApiException(400, "Missing required parameter 'summaryUpdatePayload' when calling SummariesApi->update");
            

            var localVarPath = "/summaries/{summaryId}/source";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (summaryId != null) localVarPathParams.Add("summaryId", this.ApiClient.ParameterToString(summaryId)); // path parameter
            if (summaryUpdatePayload != null && summaryUpdatePayload.GetType() != typeof(byte[]) && summaryUpdatePayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(summaryUpdatePayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryUpdatePayload; // byte array
            }


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<SummarySource>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (SummarySource) this.ApiClient.Deserialize(task.Result, typeof(SummarySource)));
            });
            
        }


        /// <summary>
        /// Update summary details Update details for a summary. Note that this operation is only allowed for summary objects where &#x60;sourceStatus&#x60; is &#x60;missing&#x60;.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summaryId">The unique identifier of the summary source you want to update.</param>
/// <param name="summaryUpdatePayload"></param>
        
        /// <returns>ApiResponse of SummarySource</returns>
		public ApiResponse<SummarySource> updateWithHttpInfo(string summaryId, SummaryUpdatePayload summaryUpdatePayload)
        {
            if (summaryUpdatePayload == null) 
                throw new ApiException(400,"Missing required parameter 'summaryUpdatePayload' when calling SummariesApi->update");
            
                                    
            if (summaryUpdatePayload == null) 
                throw new ApiException(400,"Missing required parameter 'summaryUpdatePayload' when calling SummariesApi->update");
            
                                    
            // verify the required parameter 'summaryId' is set
            if (summaryId == null)
                throw new ApiException(400, "Missing required parameter 'summaryId' when calling SummariesApi->update");
            // verify the required parameter 'summaryUpdatePayload' is set
            if (summaryUpdatePayload == null)
                throw new ApiException(400, "Missing required parameter 'summaryUpdatePayload' when calling SummariesApi->update");
            

            var localVarPath = "/summaries/{summaryId}/source";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (summaryId != null) localVarPathParams.Add("summaryId", this.ApiClient.ParameterToString(summaryId)); // path parameter
            if (summaryUpdatePayload != null && summaryUpdatePayload.GetType() != typeof(byte[]) && summaryUpdatePayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(summaryUpdatePayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryUpdatePayload; // byte array
            }


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<SummarySource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SummarySource) this.ApiClient.Deserialize(localVarResponse, typeof(SummarySource)));
            
        }

        
        /// <summary>
        /// Delete video summary Delete a summary tied to a video.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="summaryId">The unique identifier of the summary you want to delete.</param>
        
        /// <returns></returns>
		public Task<ApiResponse<object>> deleteAsync(string summaryId, CancellationToken cancellationToken = default)
        {
             return deleteWithHttpInfoAsync(summaryId, cancellationToken);
        }

        /// <summary>
        /// Delete video summary Delete a summary tied to a video.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summaryId">The unique identifier of the summary you want to delete.</param>
        
        /// <returns></returns>
		public void delete(string summaryId)
        {
             deleteWithHttpInfo(summaryId);
        }


        /// <summary>
        /// Delete video summary Delete a summary tied to a video.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="summaryId">The unique identifier of the summary you want to delete.</param>
        
        /// <returns>ApiResponse of Object(void)</returns>
		public Task<ApiResponse<Object>> deleteWithHttpInfoAsync(string summaryId, CancellationToken cancellationToken = default)
        {

            // verify the required parameter 'summaryId' is set
            if (summaryId == null)
                throw new ApiException(400, "Missing required parameter 'summaryId' when calling SummariesApi->delete");
            

            var localVarPath = "/summaries/{summaryId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (summaryId != null) localVarPathParams.Add("summaryId", this.ApiClient.ParameterToString(summaryId)); // path parameter


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);

            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<Object>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    null);
            });
            
        }


        /// <summary>
        /// Delete video summary Delete a summary tied to a video.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summaryId">The unique identifier of the summary you want to delete.</param>
        
        /// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> deleteWithHttpInfo(string summaryId)
        {

            // verify the required parameter 'summaryId' is set
            if (summaryId == null)
                throw new ApiException(400, "Missing required parameter 'summaryId' when calling SummariesApi->delete");
            

            var localVarPath = "/summaries/{summaryId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (summaryId != null) localVarPathParams.Add("summaryId", this.ApiClient.ParameterToString(summaryId)); // path parameter


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
            
        }

        
        /// <summary>
        /// List summaries List all summarries for your videos in a project.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">Use this parameter to filter for a summary that belongs to a specific video. (optional)</param>
/// <param name="origin">Use this parameter to filter for summaries based on the way they were created: automatically or manually via the API. (optional)</param>
/// <param name="sourceStatus">Use this parameter to filter for summaries based on the current status of the summary source.  These are the available statuses:  &#x60;missing&#x60;: the input for a summary is not present. &#x60;waiting&#x60; : the input video is being processed and a summary will be generated. &#x60;failed&#x60;: a technical issue prevented summary generation. &#x60;completed&#x60;: the summary is generated. &#x60;unprocessable&#x60;: the API rules the source video to be unsuitable for summary generation. An example for this is an input video that has no audio.  (optional)</param>
/// <param name="sortBy">Use this parameter to choose which field the API will use to sort the response data. The default is &#x60;value&#x60;.  These are the available fields to sort by:  - &#x60;createdAt&#x60;: Sorts the results based on date and timestamps when summaries were created. - &#x60;updatedAt&#x60;: Sorts the results based on date and timestamps when summaries were last updated. - &#x60;videoId&#x60;: Sorts the results based on video IDs.  (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>SummariesListResponse</returns>
		public Task<SummariesListResponse> listAsync(string videoId = default, string origin = default, string sourceStatus = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<SummariesListResponse>> localVarResponse = listWithHttpInfoAsync(videoId, origin, sourceStatus, sortBy, sortOrder, currentPage, pageSize, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<SummariesListResponse>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// List summaries List all summarries for your videos in a project.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Use this parameter to filter for a summary that belongs to a specific video. (optional)</param>
/// <param name="origin">Use this parameter to filter for summaries based on the way they were created: automatically or manually via the API. (optional)</param>
/// <param name="sourceStatus">Use this parameter to filter for summaries based on the current status of the summary source.  These are the available statuses:  &#x60;missing&#x60;: the input for a summary is not present. &#x60;waiting&#x60; : the input video is being processed and a summary will be generated. &#x60;failed&#x60;: a technical issue prevented summary generation. &#x60;completed&#x60;: the summary is generated. &#x60;unprocessable&#x60;: the API rules the source video to be unsuitable for summary generation. An example for this is an input video that has no audio.  (optional)</param>
/// <param name="sortBy">Use this parameter to choose which field the API will use to sort the response data. The default is &#x60;value&#x60;.  These are the available fields to sort by:  - &#x60;createdAt&#x60;: Sorts the results based on date and timestamps when summaries were created. - &#x60;updatedAt&#x60;: Sorts the results based on date and timestamps when summaries were last updated. - &#x60;videoId&#x60;: Sorts the results based on video IDs.  (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>SummariesListResponse</returns>
		public SummariesListResponse list(string videoId = default, string origin = default, string sourceStatus = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<SummariesListResponse> localVarResponse = listWithHttpInfo(videoId, origin, sourceStatus, sortBy, sortOrder, currentPage, pageSize);
             return localVarResponse.Data;
        }


        /// <summary>
        /// List summaries List all summarries for your videos in a project.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">Use this parameter to filter for a summary that belongs to a specific video. (optional)</param>
/// <param name="origin">Use this parameter to filter for summaries based on the way they were created: automatically or manually via the API. (optional)</param>
/// <param name="sourceStatus">Use this parameter to filter for summaries based on the current status of the summary source.  These are the available statuses:  &#x60;missing&#x60;: the input for a summary is not present. &#x60;waiting&#x60; : the input video is being processed and a summary will be generated. &#x60;failed&#x60;: a technical issue prevented summary generation. &#x60;completed&#x60;: the summary is generated. &#x60;unprocessable&#x60;: the API rules the source video to be unsuitable for summary generation. An example for this is an input video that has no audio.  (optional)</param>
/// <param name="sortBy">Use this parameter to choose which field the API will use to sort the response data. The default is &#x60;value&#x60;.  These are the available fields to sort by:  - &#x60;createdAt&#x60;: Sorts the results based on date and timestamps when summaries were created. - &#x60;updatedAt&#x60;: Sorts the results based on date and timestamps when summaries were last updated. - &#x60;videoId&#x60;: Sorts the results based on video IDs.  (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of SummariesListResponse</returns>
		public Task<ApiResponse<SummariesListResponse>> listWithHttpInfoAsync(string videoId = default, string origin = default, string sourceStatus = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default, CancellationToken cancellationToken = default)
        {







            

            var localVarPath = "/summaries";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "videoId", videoId)); // query parameter
            if (origin != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "origin", origin)); // query parameter
            if (sourceStatus != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sourceStatus", sourceStatus)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<SummariesListResponse>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (SummariesListResponse) this.ApiClient.Deserialize(task.Result, typeof(SummariesListResponse)));
            });
            
        }


        /// <summary>
        /// List summaries List all summarries for your videos in a project.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Use this parameter to filter for a summary that belongs to a specific video. (optional)</param>
/// <param name="origin">Use this parameter to filter for summaries based on the way they were created: automatically or manually via the API. (optional)</param>
/// <param name="sourceStatus">Use this parameter to filter for summaries based on the current status of the summary source.  These are the available statuses:  &#x60;missing&#x60;: the input for a summary is not present. &#x60;waiting&#x60; : the input video is being processed and a summary will be generated. &#x60;failed&#x60;: a technical issue prevented summary generation. &#x60;completed&#x60;: the summary is generated. &#x60;unprocessable&#x60;: the API rules the source video to be unsuitable for summary generation. An example for this is an input video that has no audio.  (optional)</param>
/// <param name="sortBy">Use this parameter to choose which field the API will use to sort the response data. The default is &#x60;value&#x60;.  These are the available fields to sort by:  - &#x60;createdAt&#x60;: Sorts the results based on date and timestamps when summaries were created. - &#x60;updatedAt&#x60;: Sorts the results based on date and timestamps when summaries were last updated. - &#x60;videoId&#x60;: Sorts the results based on video IDs.  (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of SummariesListResponse</returns>
		public ApiResponse<SummariesListResponse> listWithHttpInfo(string videoId = default, string origin = default, string sourceStatus = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {







            

            var localVarPath = "/summaries";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "videoId", videoId)); // query parameter
            if (origin != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "origin", origin)); // query parameter
            if (sourceStatus != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sourceStatus", sourceStatus)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<SummariesListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SummariesListResponse) this.ApiClient.Deserialize(localVarResponse, typeof(SummariesListResponse)));
            
        }

        
        /// <summary>
        /// List all summarries for your videos in a project.
        /// </summary>
        /// <returns>APIlistRequest</returns>
        public APIlistRequest list() {
            return new APIlistRequest(this);
        }

        /// <summary>
        /// Request list class to get paginated list of items
        /// </summary>
        public class APIlistRequest {
            private string videoId;
            private string origin;
            private string sourceStatus;
            private string sortBy;
            private string sortOrder;
            private int? currentPage;
            private int? pageSize;

            private SummariesApi currentApiInstance;

            /// <summary>
            /// Class constructor with api instance
            /// </summary>
            /// <param name="instance">Instance of the current api</param>
            public APIlistRequest(SummariesApi instance) {
                this.currentApiInstance = instance;
            }

            /// <summary>
            /// Set videoId
            /// </summary>
            /// <param name="videoId">Use this parameter to filter for a summary that belongs to a specific video. (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest VideoId(string videoId) {
                this.videoId = videoId;
                return this;
            }

            /// <summary>
            /// Set origin
            /// </summary>
            /// <param name="origin">Use this parameter to filter for summaries based on the way they were created: automatically or manually via the API. (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest Origin(string origin) {
                this.origin = origin;
                return this;
            }

            /// <summary>
            /// Set sourceStatus
            /// </summary>
            /// <param name="sourceStatus">Use this parameter to filter for summaries based on the current status of the summary source.  These are the available statuses:  &#x60;missing&#x60;: the input for a summary is not present. &#x60;waiting&#x60; : the input video is being processed and a summary will be generated. &#x60;failed&#x60;: a technical issue prevented summary generation. &#x60;completed&#x60;: the summary is generated. &#x60;unprocessable&#x60;: the API rules the source video to be unsuitable for summary generation. An example for this is an input video that has no audio.  (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest SourceStatus(string sourceStatus) {
                this.sourceStatus = sourceStatus;
                return this;
            }

            /// <summary>
            /// Set sortBy
            /// </summary>
            /// <param name="sortBy">Use this parameter to choose which field the API will use to sort the response data. The default is &#x60;value&#x60;.  These are the available fields to sort by:  - &#x60;createdAt&#x60;: Sorts the results based on date and timestamps when summaries were created. - &#x60;updatedAt&#x60;: Sorts the results based on date and timestamps when summaries were last updated. - &#x60;videoId&#x60;: Sorts the results based on video IDs.  (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest SortBy(string sortBy) {
                this.sortBy = sortBy;
                return this;
            }

            /// <summary>
            /// Set sortOrder
            /// </summary>
            /// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest SortOrder(string sortOrder) {
                this.sortOrder = sortOrder;
                return this;
            }

            /// <summary>
            /// Set currentPage
            /// </summary>
            /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest CurrentPage(int? currentPage) {
                this.currentPage = currentPage;
                return this;
            }

            /// <summary>
            /// Set pageSize
            /// </summary>
            /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest PageSize(int? pageSize) {
                this.pageSize = pageSize;
                return this;
            }

            

            /// <summary>
            /// Execute list request
            /// </summary>
            /// <returns>SummariesListResponse </returns>
            public Page<Summary> execute(){
                ApiResponse<SummariesListResponse> localVarResp = this.currentApiInstance.listWithHttpInfo(videoId, origin, sourceStatus, sortBy, sortOrder, currentPage, pageSize);
                return new Page<Summary>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                    try {
                        return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                    } catch (ApiException e) {
                        throw new Exception(e.Message);
                    }
                }); 
            }

            private APIlistRequest copy() {
                APIlistRequest copy = new APIlistRequest( this.currentApiInstance);
                copy.VideoId(videoId);
                copy.Origin(origin);
                copy.SourceStatus(sourceStatus);
                copy.SortBy(sortBy);
                copy.SortOrder(sortOrder);
                copy.CurrentPage(currentPage);
                copy.PageSize(pageSize);
                return copy;
            }
        }
        /// <summary>
        /// Get summary details Get all details for a summary.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="summaryId">The unique identifier of the summary source you want to retrieve.</param>
        
        /// <returns>SummarySource</returns>
		public Task<SummarySource> getSummarySourceAsync(string summaryId, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<SummarySource>> localVarResponse = getSummarySourceWithHttpInfoAsync(summaryId, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<SummarySource>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// Get summary details Get all details for a summary.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summaryId">The unique identifier of the summary source you want to retrieve.</param>
        
        /// <returns>SummarySource</returns>
		public SummarySource getSummarySource(string summaryId)
        {
             ApiResponse<SummarySource> localVarResponse = getSummarySourceWithHttpInfo(summaryId);
             return localVarResponse.Data;
        }


        /// <summary>
        /// Get summary details Get all details for a summary.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="summaryId">The unique identifier of the summary source you want to retrieve.</param>
        
        /// <returns>ApiResponse of SummarySource</returns>
		public Task<ApiResponse<SummarySource>> getSummarySourceWithHttpInfoAsync(string summaryId, CancellationToken cancellationToken = default)
        {

            // verify the required parameter 'summaryId' is set
            if (summaryId == null)
                throw new ApiException(400, "Missing required parameter 'summaryId' when calling SummariesApi->getSummarySource");
            

            var localVarPath = "/summaries/{summaryId}/source";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (summaryId != null) localVarPathParams.Add("summaryId", this.ApiClient.ParameterToString(summaryId)); // path parameter


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<SummarySource>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (SummarySource) this.ApiClient.Deserialize(task.Result, typeof(SummarySource)));
            });
            
        }


        /// <summary>
        /// Get summary details Get all details for a summary.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summaryId">The unique identifier of the summary source you want to retrieve.</param>
        
        /// <returns>ApiResponse of SummarySource</returns>
		public ApiResponse<SummarySource> getSummarySourceWithHttpInfo(string summaryId)
        {

            // verify the required parameter 'summaryId' is set
            if (summaryId == null)
                throw new ApiException(400, "Missing required parameter 'summaryId' when calling SummariesApi->getSummarySource");
            

            var localVarPath = "/summaries/{summaryId}/source";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (summaryId != null) localVarPathParams.Add("summaryId", this.ApiClient.ParameterToString(summaryId)); // path parameter


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<SummarySource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SummarySource) this.ApiClient.Deserialize(localVarResponse, typeof(SummarySource)));
            
        }

        

    }

}
