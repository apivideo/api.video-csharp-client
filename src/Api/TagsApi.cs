/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.IO;
using ApiVideo.Upload;
using RestSharp;
using ApiVideo.Client;
using ApiVideo.Model;

namespace ApiVideo.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TagsApi
    {
        /// <summary>
        /// Api Client Instance
        /// </summary>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagsApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// List all video tags This endpoint enables you to search for video tags in a project and see how many videos are tagged with them. If you do not define any query parameters, the endpoint lists all video tags and the numbers of times they are used in a project.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="value">Use this parameter to search for specific video tags. The API filters results even on partial values, and ignores accents, uppercase, and lowercase.  (optional)</param>
/// <param name="sortBy">Use this parameter to choose which field the API will use to sort the response data. The default is &#x60;value&#x60;.  These are the available fields to sort by:  - &#x60;value&#x60;: Sorts the results based on tag values in alphabetic order. - &#x60;videoCount&#x60;: Sorts the results based on the number of times a video tag is used.  (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ListTagsResponse</returns>
		public Task<ListTagsResponse> listAsync(string value = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<ListTagsResponse>> localVarResponse = listWithHttpInfoAsync(value, sortBy, sortOrder, currentPage, pageSize, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<ListTagsResponse>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// List all video tags This endpoint enables you to search for video tags in a project and see how many videos are tagged with them. If you do not define any query parameters, the endpoint lists all video tags and the numbers of times they are used in a project.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Use this parameter to search for specific video tags. The API filters results even on partial values, and ignores accents, uppercase, and lowercase.  (optional)</param>
/// <param name="sortBy">Use this parameter to choose which field the API will use to sort the response data. The default is &#x60;value&#x60;.  These are the available fields to sort by:  - &#x60;value&#x60;: Sorts the results based on tag values in alphabetic order. - &#x60;videoCount&#x60;: Sorts the results based on the number of times a video tag is used.  (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ListTagsResponse</returns>
		public ListTagsResponse list(string value = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<ListTagsResponse> localVarResponse = listWithHttpInfo(value, sortBy, sortOrder, currentPage, pageSize);
             return localVarResponse.Data;
        }


        /// <summary>
        /// List all video tags This endpoint enables you to search for video tags in a project and see how many videos are tagged with them. If you do not define any query parameters, the endpoint lists all video tags and the numbers of times they are used in a project.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="value">Use this parameter to search for specific video tags. The API filters results even on partial values, and ignores accents, uppercase, and lowercase.  (optional)</param>
/// <param name="sortBy">Use this parameter to choose which field the API will use to sort the response data. The default is &#x60;value&#x60;.  These are the available fields to sort by:  - &#x60;value&#x60;: Sorts the results based on tag values in alphabetic order. - &#x60;videoCount&#x60;: Sorts the results based on the number of times a video tag is used.  (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of ListTagsResponse</returns>
		public Task<ApiResponse<ListTagsResponse>> listWithHttpInfoAsync(string value = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default, CancellationToken cancellationToken = default)
        {





            

            var localVarPath = "/tags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<ListTagsResponse>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (ListTagsResponse) this.ApiClient.Deserialize(task.Result, typeof(ListTagsResponse)));
            });
            
        }


        /// <summary>
        /// List all video tags This endpoint enables you to search for video tags in a project and see how many videos are tagged with them. If you do not define any query parameters, the endpoint lists all video tags and the numbers of times they are used in a project.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Use this parameter to search for specific video tags. The API filters results even on partial values, and ignores accents, uppercase, and lowercase.  (optional)</param>
/// <param name="sortBy">Use this parameter to choose which field the API will use to sort the response data. The default is &#x60;value&#x60;.  These are the available fields to sort by:  - &#x60;value&#x60;: Sorts the results based on tag values in alphabetic order. - &#x60;videoCount&#x60;: Sorts the results based on the number of times a video tag is used.  (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of ListTagsResponse</returns>
		public ApiResponse<ListTagsResponse> listWithHttpInfo(string value = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {





            

            var localVarPath = "/tags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<ListTagsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListTagsResponse) this.ApiClient.Deserialize(localVarResponse, typeof(ListTagsResponse)));
            
        }

        
        /// <summary>
        /// This endpoint enables you to search for video tags in a project and see how many videos are tagged with them. If you do not define any query parameters, the endpoint lists all video tags and the numbers of times they are used in a project.
        /// </summary>
        /// <returns>APIlistRequest</returns>
        public APIlistRequest list() {
            return new APIlistRequest(this);
        }

        /// <summary>
        /// Request list class to get paginated list of items
        /// </summary>
        public class APIlistRequest {
            private string value;
            private string sortBy;
            private string sortOrder;
            private int? currentPage;
            private int? pageSize;

            private TagsApi currentApiInstance;

            /// <summary>
            /// Class constructor with api instance
            /// </summary>
            /// <param name="instance">Instance of the current api</param>
            public APIlistRequest(TagsApi instance) {
                this.currentApiInstance = instance;
            }

            /// <summary>
            /// Set value
            /// </summary>
            /// <param name="value">Use this parameter to search for specific video tags. The API filters results even on partial values, and ignores accents, uppercase, and lowercase.  (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest Value(string value) {
                this.value = value;
                return this;
            }

            /// <summary>
            /// Set sortBy
            /// </summary>
            /// <param name="sortBy">Use this parameter to choose which field the API will use to sort the response data. The default is &#x60;value&#x60;.  These are the available fields to sort by:  - &#x60;value&#x60;: Sorts the results based on tag values in alphabetic order. - &#x60;videoCount&#x60;: Sorts the results based on the number of times a video tag is used.  (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest SortBy(string sortBy) {
                this.sortBy = sortBy;
                return this;
            }

            /// <summary>
            /// Set sortOrder
            /// </summary>
            /// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest SortOrder(string sortOrder) {
                this.sortOrder = sortOrder;
                return this;
            }

            /// <summary>
            /// Set currentPage
            /// </summary>
            /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest CurrentPage(int? currentPage) {
                this.currentPage = currentPage;
                return this;
            }

            /// <summary>
            /// Set pageSize
            /// </summary>
            /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest PageSize(int? pageSize) {
                this.pageSize = pageSize;
                return this;
            }

            

            /// <summary>
            /// Execute list request
            /// </summary>
            /// <returns>ListTagsResponse </returns>
            public Page<ListTagsResponseData> execute(){
                ApiResponse<ListTagsResponse> localVarResp = this.currentApiInstance.listWithHttpInfo(value, sortBy, sortOrder, currentPage, pageSize);
                return new Page<ListTagsResponseData>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                    try {
                        return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                    } catch (ApiException e) {
                        throw new Exception(e.Message);
                    }
                }); 
            }

            private APIlistRequest copy() {
                APIlistRequest copy = new APIlistRequest( this.currentApiInstance);
                copy.Value(value);
                copy.SortBy(sortBy);
                copy.SortOrder(sortOrder);
                copy.CurrentPage(currentPage);
                copy.PageSize(pageSize);
                return copy;
            }
        }

    }

}
