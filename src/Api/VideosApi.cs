/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.IO;
using ApiVideo.Upload;
using RestSharp;
using ApiVideo.Client;
using ApiVideo.Model;

namespace ApiVideo.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class VideosApi
    {
        /// <summary>
        /// Api Client Instance
        /// </summary>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Create a video object Creates a video object. More information on video objects can be found [here](https://docs.api.video/reference/api/Videos). 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoCreationPayload">video to create</param>
        
        /// <returns>Video</returns>
		public Task<Video> createAsync(VideoCreationPayload videoCreationPayload, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<Video>> localVarResponse = createWithHttpInfoAsync(videoCreationPayload, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<Video>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// Create a video object Creates a video object. More information on video objects can be found [here](https://docs.api.video/reference/api/Videos). 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoCreationPayload">video to create</param>
        
        /// <returns>Video</returns>
		public Video create(VideoCreationPayload videoCreationPayload)
        {
             ApiResponse<Video> localVarResponse = createWithHttpInfo(videoCreationPayload);
             return localVarResponse.Data;
        }


        /// <summary>
        /// Create a video object Creates a video object. More information on video objects can be found [here](https://docs.api.video/reference/api/Videos). 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoCreationPayload">video to create</param>
        
        /// <returns>ApiResponse of Video</returns>
		public Task<ApiResponse<Video>> createWithHttpInfoAsync(VideoCreationPayload videoCreationPayload, CancellationToken cancellationToken = default)
        {
            if (videoCreationPayload == null) 
                throw new ApiException(400,"Missing required parameter 'videoCreationPayload' when calling VideosApi->create");
            
            if (videoCreationPayload != null && videoCreationPayload.title == null) {
                throw new ApiException(400,"Missing required parameter 'videoCreationPayload.Title' when calling VideosApi->create");
            }
                                                                                                                                                            
            // verify the required parameter 'videoCreationPayload' is set
            if (videoCreationPayload == null)
                throw new ApiException(400, "Missing required parameter 'videoCreationPayload' when calling VideosApi->create");
            

            var localVarPath = "/videos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoCreationPayload != null && videoCreationPayload.GetType() != typeof(byte[]) && videoCreationPayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(videoCreationPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoCreationPayload; // byte array
            }


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<Video>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (Video) this.ApiClient.Deserialize(task.Result, typeof(Video)));
            });
            
        }


        /// <summary>
        /// Create a video object Creates a video object. More information on video objects can be found [here](https://docs.api.video/reference/api/Videos). 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoCreationPayload">video to create</param>
        
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> createWithHttpInfo(VideoCreationPayload videoCreationPayload)
        {
            if (videoCreationPayload == null) 
                throw new ApiException(400,"Missing required parameter 'videoCreationPayload' when calling VideosApi->create");
            
            if (videoCreationPayload != null && videoCreationPayload.title == null) {
                throw new ApiException(400,"Missing required parameter 'videoCreationPayload.Title' when calling VideosApi->create");
            }
                                                                                                                                                            
            // verify the required parameter 'videoCreationPayload' is set
            if (videoCreationPayload == null)
                throw new ApiException(400, "Missing required parameter 'videoCreationPayload' when calling VideosApi->create");
            

            var localVarPath = "/videos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoCreationPayload != null && videoCreationPayload.GetType() != typeof(byte[]) && videoCreationPayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(videoCreationPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoCreationPayload; // byte array
            }


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
        }

        
        /// <summary>
        /// Upload a video To upload a video to the videoId you created. You can only upload your video to the videoId once.
        /// 
        /// 
        /// 
        /// We offer 2 types of upload: 
        /// 
        /// * Regular upload 
        /// 
        /// * Progressive upload
        /// 
        /// The latter allows you to split a video source into X chunks and send those chunks independently (concurrently or sequentially). The 2 main goals for our users are to
        /// 
        ///   * allow the upload of video sources &gt; 200 MiB (200 MiB &#x3D; the max. allowed file size for regular upload)
        /// 
        ///   * allow to send a video source &quot;progressively&quot;, i.e., before before knowing the total size of the video.
        /// 
        ///   Once all chunks have been sent, they are reaggregated to one source file. The video source is considered as &quot;completely sent&quot; when the &quot;last&quot; chunk is sent (i.e., the chunk that &quot;completes&quot; the upload).
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">Enter the videoId you want to use to upload your video.</param>
/// <param name="file">The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video.</param>
        /// <param name="progressListener">Progress listener called after each chunk upload</param>
        /// <returns>Video</returns>
		public Task<Video> uploadAsync(string videoId, System.IO.Stream file,IUploadProgressListener progressListener = null, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<Video>> localVarResponse = uploadWithHttpInfoAsync(videoId, file,progressListener, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<Video>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// Upload a video To upload a video to the videoId you created. You can only upload your video to the videoId once.
        /// 
        /// 
        /// 
        /// We offer 2 types of upload: 
        /// 
        /// * Regular upload 
        /// 
        /// * Progressive upload
        /// 
        /// The latter allows you to split a video source into X chunks and send those chunks independently (concurrently or sequentially). The 2 main goals for our users are to
        /// 
        ///   * allow the upload of video sources &gt; 200 MiB (200 MiB &#x3D; the max. allowed file size for regular upload)
        /// 
        ///   * allow to send a video source &quot;progressively&quot;, i.e., before before knowing the total size of the video.
        /// 
        ///   Once all chunks have been sent, they are reaggregated to one source file. The video source is considered as &quot;completely sent&quot; when the &quot;last&quot; chunk is sent (i.e., the chunk that &quot;completes&quot; the upload).
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Enter the videoId you want to use to upload your video.</param>
/// <param name="file">The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video.</param>
        /// <param name="progressListener">Progress listener called after each chunk upload</param>
        /// <returns>Video</returns>
		public Video upload(string videoId, System.IO.Stream file,IUploadProgressListener progressListener = null)
        {
             ApiResponse<Video> localVarResponse = uploadWithHttpInfo(videoId, file,progressListener);
             return localVarResponse.Data;
        }


        /// <summary>
        /// Upload a video To upload a video to the videoId you created. You can only upload your video to the videoId once.
        /// 
        /// 
        /// 
        /// We offer 2 types of upload: 
        /// 
        /// * Regular upload 
        /// 
        /// * Progressive upload
        /// 
        /// The latter allows you to split a video source into X chunks and send those chunks independently (concurrently or sequentially). The 2 main goals for our users are to
        /// 
        ///   * allow the upload of video sources &gt; 200 MiB (200 MiB &#x3D; the max. allowed file size for regular upload)
        /// 
        ///   * allow to send a video source &quot;progressively&quot;, i.e., before before knowing the total size of the video.
        /// 
        ///   Once all chunks have been sent, they are reaggregated to one source file. The video source is considered as &quot;completely sent&quot; when the &quot;last&quot; chunk is sent (i.e., the chunk that &quot;completes&quot; the upload).
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">Enter the videoId you want to use to upload your video.</param>
/// <param name="file">The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video.</param>
        /// <param name="progressListener">Progress listener called after each chunk upload</param>
        /// <returns>ApiResponse of Video</returns>
		public Task<ApiResponse<Video>> uploadWithHttpInfoAsync(string videoId, System.IO.Stream file,IUploadProgressListener progressListener = null, CancellationToken cancellationToken = default)
        {


            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->upload");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling VideosApi->upload");
            
            long totalBytes = file.Length;
            int chunkSize = Convert.ToInt32(this.ApiClient.UploadChunkSize);

            var localVarPath = "/videos/{videoId}/source";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            

            if (totalBytes > chunkSize)
            {
                Task<ApiResponse<Video>> lastRes = null;
                localVarHeaderParams.Add("Content-Range", "");
                var chunkNum = 0;
                int chunkCount = (int)Math.Ceiling((double)totalBytes / (double)chunkSize);
                for (int i = 0; i < totalBytes; i += chunkSize)
                {
                    chunkNum++;
                    byte[] buffer = new byte[chunkSize];
                    if(i + chunkSize >= totalBytes) {
                        localVarHeaderParams["Content-Range"] = "part " + chunkNum + "/" + chunkNum;
                    } else {
                        localVarHeaderParams["Content-Range"] = "part " + chunkNum + "/*";
                    }
                    
                    file.Read(buffer, 0, chunkSize);

                    if(buffer != null)
                    {
                        if(localVarFileParams.ContainsKey("file"))
                        {
                            localVarFileParams["file"] = this.ApiClient.ParameterToFile("file", file, buffer);
                        }
                        else
                        {
                            localVarFileParams.Add("file",this.ApiClient.ParameterToFile("file", file, buffer));
                        }
                    }
                    
                    // make the HTTP request
                    Task<RestResponse> localVarResponse = this.ApiClient.CallApiAsync(localVarPath,
                        Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                        localVarPathParams, localVarContentType, cancellationToken);

                    int localVarStatusCode = (int) localVarResponse.Result.StatusCode;
                    lastRes = localVarResponse.ContinueWith((Task<RestResponse> task) =>
                    {
                        return new ApiResponse<Video>(localVarStatusCode,
                            task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                            (Video) this.ApiClient.Deserialize(task.Result, typeof(Video)));
                    });
                 
                    
                    if(progressListener != null)
                    {
                        progressListener.onProgress(Math.Min(i + chunkSize, totalBytes), totalBytes, chunkCount, chunkNum);
                    }
                }
                return lastRes;
            }
            else{

            
            if (file != null) 
                localVarFileParams.Add("file", this.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);

            if (progressListener != null)
            {
                progressListener.onProgress(totalBytes, totalBytes, 1, 1);
            }

            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<Video>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (Video) this.ApiClient.Deserialize(task.Result, typeof(Video)));
            });
            
            }
        }


        /// <summary>
        /// Upload a video To upload a video to the videoId you created. You can only upload your video to the videoId once.
        /// 
        /// 
        /// 
        /// We offer 2 types of upload: 
        /// 
        /// * Regular upload 
        /// 
        /// * Progressive upload
        /// 
        /// The latter allows you to split a video source into X chunks and send those chunks independently (concurrently or sequentially). The 2 main goals for our users are to
        /// 
        ///   * allow the upload of video sources &gt; 200 MiB (200 MiB &#x3D; the max. allowed file size for regular upload)
        /// 
        ///   * allow to send a video source &quot;progressively&quot;, i.e., before before knowing the total size of the video.
        /// 
        ///   Once all chunks have been sent, they are reaggregated to one source file. The video source is considered as &quot;completely sent&quot; when the &quot;last&quot; chunk is sent (i.e., the chunk that &quot;completes&quot; the upload).
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Enter the videoId you want to use to upload your video.</param>
/// <param name="file">The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video.</param>
        /// <param name="progressListener">Progress listener called after each chunk upload</param>
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> uploadWithHttpInfo(string videoId, System.IO.Stream file,IUploadProgressListener progressListener = null)
        {


            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->upload");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling VideosApi->upload");
            
            long totalBytes = file.Length;
            int chunkSize = Convert.ToInt32(this.ApiClient.UploadChunkSize);

            var localVarPath = "/videos/{videoId}/source";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            

            if (totalBytes > chunkSize)
            {
                ApiResponse<Video> lastRes = null;
                localVarHeaderParams.Add("Content-Range", "");
                var chunkNum = 0;
                int chunkCount = (int)Math.Ceiling((double)totalBytes / (double)chunkSize);
                for (int i = 0; i < totalBytes; i += chunkSize)
                {
                    chunkNum++;
                    byte[] buffer = new byte[chunkSize];
                    if(i + chunkSize >= totalBytes) {
                        localVarHeaderParams["Content-Range"] = "part " + chunkNum + "/" + chunkNum;
                    } else {
                        localVarHeaderParams["Content-Range"] = "part " + chunkNum + "/*";
                    }
                    
                    file.Read(buffer, 0, chunkSize);

                    if(buffer != null)
                    {
                        if(localVarFileParams.ContainsKey("file"))
                        {
                            localVarFileParams["file"] = this.ApiClient.ParameterToFile("file", file, buffer);
                        }
                        else
                        {
                            localVarFileParams.Add("file",this.ApiClient.ParameterToFile("file", file, buffer));
                        }
                    }
                    
                    // make the HTTP request
                    RestResponse localVarResponse = (RestResponse)this.ApiClient.CallApi(localVarPath,
                        Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                        localVarPathParams, localVarContentType);

                    int localVarStatusCode = (int)localVarResponse.StatusCode;
                    lastRes = new ApiResponse<Video>(localVarStatusCode,
                        localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                        (Video)this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
                    
                    if(progressListener != null)
                    {
                        progressListener.onProgress(Math.Min(i + chunkSize, totalBytes), totalBytes, chunkCount, chunkNum);
                    }
                }
                return lastRes;
            }
            else{

            
            if (file != null) 
                localVarFileParams.Add("file", this.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (progressListener != null)
            {
                progressListener.onProgress(totalBytes, totalBytes, 1, 1);
            }
            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
            }
        }

         public ApiResponse<Video> uploadPartWithHttpInfo(string videoId, System.IO.Stream file, int part, bool isLast) {


            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->upload");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling VideosApi->upload");

            long totalBytes = file.Length;
            int chunkSize = Convert.ToInt32(this.ApiClient.UploadChunkSize);

            var localVarPath = "/videos/{videoId}/source";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            

            
            if (file != null)
                localVarFileParams.Add("file", this.ApiClient.ParameterToFile("file", file));

            if(isLast)
            {
                localVarHeaderParams["Content-Range"] = "part " + part + "/" + part;
            } else
            {
                localVarHeaderParams["Content-Range"] = "part " + part + "/*";
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));


        }


        public class UploadProgressiveSession {
            private int partNum = 1;

            
            private string videoId;
            private VideosApi videosApi;

            public UploadProgressiveSession(VideosApi videosApi, string videoId) {
                this.videoId = videoId;
                this.videosApi = videosApi;
            }

            public Video uploadPart(System.IO.Stream part) {
                return uploadPart(part, false);
            }

            public Video uploadLastPart(System.IO.Stream part) {
                return uploadPart(part, true);
            }

            public Video uploadPart(System.IO.Stream part, bool isLastPart) {
                int lastPartNum = partNum;
                partNum++;
                ApiResponse<Video> localVarResp = this.videosApi.uploadPartWithHttpInfo(this.videoId, part, lastPartNum, isLastPart);

                return localVarResp.Data;
            }
        }

        public UploadProgressiveSession createUploadProgressiveSession(string videoId) {
            return new UploadProgressiveSession(this, videoId);
        }
        
        /// <summary>
        /// Upload with an delegated upload token This method allows you to send a video using an upload token. Upload tokens are especially useful when the upload is done from the client side. If you want to upload a video from your server-side application, you&#39;d better use the [standard upload method](#upload).
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="token">The unique identifier for the token you want to use to upload a video.</param>
/// <param name="file">The path to the video you want to upload.</param>
        /// <param name="progressListener">Progress listener called after each chunk upload</param>
        /// <returns>Video</returns>
		public Task<Video> uploadWithUploadTokenAsync(string token, System.IO.Stream file,IUploadProgressListener progressListener = null, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<Video>> localVarResponse = uploadWithUploadTokenWithHttpInfoAsync(token, file,progressListener, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<Video>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// Upload with an delegated upload token This method allows you to send a video using an upload token. Upload tokens are especially useful when the upload is done from the client side. If you want to upload a video from your server-side application, you&#39;d better use the [standard upload method](#upload).
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The unique identifier for the token you want to use to upload a video.</param>
/// <param name="file">The path to the video you want to upload.</param>
        /// <param name="progressListener">Progress listener called after each chunk upload</param>
        /// <returns>Video</returns>
		public Video uploadWithUploadToken(string token, System.IO.Stream file,IUploadProgressListener progressListener = null)
        {
             ApiResponse<Video> localVarResponse = uploadWithUploadTokenWithHttpInfo(token, file,progressListener);
             return localVarResponse.Data;
        }


        /// <summary>
        /// Upload with an delegated upload token This method allows you to send a video using an upload token. Upload tokens are especially useful when the upload is done from the client side. If you want to upload a video from your server-side application, you&#39;d better use the [standard upload method](#upload).
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="token">The unique identifier for the token you want to use to upload a video.</param>
/// <param name="file">The path to the video you want to upload.</param>
        /// <param name="progressListener">Progress listener called after each chunk upload</param>
        /// <returns>ApiResponse of Video</returns>
		public Task<ApiResponse<Video>> uploadWithUploadTokenWithHttpInfoAsync(string token, System.IO.Stream file,IUploadProgressListener progressListener = null, CancellationToken cancellationToken = default)
        {


            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling VideosApi->uploadWithUploadToken");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling VideosApi->uploadWithUploadToken");
            
            long totalBytes = file.Length;
            int chunkSize = Convert.ToInt32(this.ApiClient.UploadChunkSize);

            var localVarPath = "/upload";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            

            if (totalBytes > chunkSize)
            {
                Task<ApiResponse<Video>> lastRes = null;
                localVarHeaderParams.Add("Content-Range", "");
                var chunkNum = 0;
                int chunkCount = (int)Math.Ceiling((double)totalBytes / (double)chunkSize);
                for (int i = 0; i < totalBytes; i += chunkSize)
                {
                    chunkNum++;
                    byte[] buffer = new byte[chunkSize];
                    if(i + chunkSize >= totalBytes) {
                        localVarHeaderParams["Content-Range"] = "part " + chunkNum + "/" + chunkNum;
                    } else {
                        localVarHeaderParams["Content-Range"] = "part " + chunkNum + "/*";
                    }
                    
                    file.Read(buffer, 0, chunkSize);

                    if(buffer != null)
                    {
                        if(localVarFileParams.ContainsKey("file"))
                        {
                            localVarFileParams["file"] = this.ApiClient.ParameterToFile("file", file, buffer);
                        }
                        else
                        {
                            localVarFileParams.Add("file",this.ApiClient.ParameterToFile("file", file, buffer));
                        }
                    }
                    
                    // make the HTTP request
                    Task<RestResponse> localVarResponse = this.ApiClient.CallApiAsync(localVarPath,
                        Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                        localVarPathParams, localVarContentType, cancellationToken);

                    int localVarStatusCode = (int) localVarResponse.Result.StatusCode;
                    lastRes = localVarResponse.ContinueWith((Task<RestResponse> task) =>
                    {
                        return new ApiResponse<Video>(localVarStatusCode,
                            task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                            (Video) this.ApiClient.Deserialize(task.Result, typeof(Video)));
                    });
                 
                    
                    if(progressListener != null)
                    {
                        progressListener.onProgress(Math.Min(i + chunkSize, totalBytes), totalBytes, chunkCount, chunkNum);
                    }
                }
                return lastRes;
            }
            else{

            
            if (file != null) 
                localVarFileParams.Add("file", this.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);

            if (progressListener != null)
            {
                progressListener.onProgress(totalBytes, totalBytes, 1, 1);
            }

            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<Video>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (Video) this.ApiClient.Deserialize(task.Result, typeof(Video)));
            });
            
            }
        }


        /// <summary>
        /// Upload with an delegated upload token This method allows you to send a video using an upload token. Upload tokens are especially useful when the upload is done from the client side. If you want to upload a video from your server-side application, you&#39;d better use the [standard upload method](#upload).
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The unique identifier for the token you want to use to upload a video.</param>
/// <param name="file">The path to the video you want to upload.</param>
        /// <param name="progressListener">Progress listener called after each chunk upload</param>
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> uploadWithUploadTokenWithHttpInfo(string token, System.IO.Stream file,IUploadProgressListener progressListener = null)
        {


            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling VideosApi->uploadWithUploadToken");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling VideosApi->uploadWithUploadToken");
            
            long totalBytes = file.Length;
            int chunkSize = Convert.ToInt32(this.ApiClient.UploadChunkSize);

            var localVarPath = "/upload";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            

            if (totalBytes > chunkSize)
            {
                ApiResponse<Video> lastRes = null;
                localVarHeaderParams.Add("Content-Range", "");
                var chunkNum = 0;
                int chunkCount = (int)Math.Ceiling((double)totalBytes / (double)chunkSize);
                for (int i = 0; i < totalBytes; i += chunkSize)
                {
                    chunkNum++;
                    byte[] buffer = new byte[chunkSize];
                    if(i + chunkSize >= totalBytes) {
                        localVarHeaderParams["Content-Range"] = "part " + chunkNum + "/" + chunkNum;
                    } else {
                        localVarHeaderParams["Content-Range"] = "part " + chunkNum + "/*";
                    }
                    
                    file.Read(buffer, 0, chunkSize);

                    if(buffer != null)
                    {
                        if(localVarFileParams.ContainsKey("file"))
                        {
                            localVarFileParams["file"] = this.ApiClient.ParameterToFile("file", file, buffer);
                        }
                        else
                        {
                            localVarFileParams.Add("file",this.ApiClient.ParameterToFile("file", file, buffer));
                        }
                    }
                    
                    // make the HTTP request
                    RestResponse localVarResponse = (RestResponse)this.ApiClient.CallApi(localVarPath,
                        Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                        localVarPathParams, localVarContentType);

                    int localVarStatusCode = (int)localVarResponse.StatusCode;
                    lastRes = new ApiResponse<Video>(localVarStatusCode,
                        localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                        (Video)this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
                    
                    if(progressListener != null)
                    {
                        progressListener.onProgress(Math.Min(i + chunkSize, totalBytes), totalBytes, chunkCount, chunkNum);
                    }
                }
                return lastRes;
            }
            else{

            
            if (file != null) 
                localVarFileParams.Add("file", this.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (progressListener != null)
            {
                progressListener.onProgress(totalBytes, totalBytes, 1, 1);
            }
            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
            }
        }

         public ApiResponse<Video> uploadWithUploadTokenPartWithHttpInfo(string token, System.IO.Stream file, string videoId, int part, bool isLast) {


            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling VideosApi->uploadWithUploadToken");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling VideosApi->uploadWithUploadToken");

            long totalBytes = file.Length;
            int chunkSize = Convert.ToInt32(this.ApiClient.UploadChunkSize);

            var localVarPath = "/upload";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null)
                localVarFormParams.Add("videoId", videoId);

            if (token != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            

            
            if (file != null)
                localVarFileParams.Add("file", this.ApiClient.ParameterToFile("file", file));

            if(isLast)
            {
                localVarHeaderParams["Content-Range"] = "part " + part + "/" + part;
            } else
            {
                localVarHeaderParams["Content-Range"] = "part " + part + "/*";
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));


        }


        public class UploadWithUploadTokenProgressiveSession {
            private int partNum = 1;
            private string videoId; 
            
            private string token;
            private VideosApi videosApi;

            public UploadWithUploadTokenProgressiveSession(VideosApi videosApi, string token) {
                this.token = token;
                this.videosApi = videosApi;
            }

            public Video uploadPart(System.IO.Stream part) {
                return uploadPart(part, false);
            }

            public Video uploadLastPart(System.IO.Stream part) {
                return uploadPart(part, true);
            }

            public Video uploadPart(System.IO.Stream part, bool isLastPart) {
                int lastPartNum = partNum;
                partNum++;
                ApiResponse<Video> localVarResp = this.videosApi.uploadWithUploadTokenPartWithHttpInfo(this.token, part, this.videoId, lastPartNum, isLastPart);
                if(this.videoId == null) {
                    this.videoId = localVarResp.Data.videoid;
                } 
                return localVarResp.Data;
            }
        }

        public UploadWithUploadTokenProgressiveSession createUploadWithUploadTokenProgressiveSession(string token) {
            return new UploadWithUploadTokenProgressiveSession(this, token);
        }
        
        /// <summary>
        /// Retrieve a video object This call provides the same information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">The unique identifier for the video you want details about.</param>
        
        /// <returns>Video</returns>
		public Task<Video> getAsync(string videoId, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<Video>> localVarResponse = getWithHttpInfoAsync(videoId, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<Video>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// Retrieve a video object This call provides the same information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want details about.</param>
        
        /// <returns>Video</returns>
		public Video get(string videoId)
        {
             ApiResponse<Video> localVarResponse = getWithHttpInfo(videoId);
             return localVarResponse.Data;
        }


        /// <summary>
        /// Retrieve a video object This call provides the same information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">The unique identifier for the video you want details about.</param>
        
        /// <returns>ApiResponse of Video</returns>
		public Task<ApiResponse<Video>> getWithHttpInfoAsync(string videoId, CancellationToken cancellationToken = default)
        {

            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->get");
            

            var localVarPath = "/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<Video>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (Video) this.ApiClient.Deserialize(task.Result, typeof(Video)));
            });
            
        }


        /// <summary>
        /// Retrieve a video object This call provides the same information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want details about.</param>
        
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> getWithHttpInfo(string videoId)
        {

            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->get");
            

            var localVarPath = "/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
        }

        
        /// <summary>
        /// Update a video object Updates the parameters associated with a video ID. The video object you are updating is determined by the video ID you provide. 
        /// 
        /// 
        /// 
        /// NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it.
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">The video ID for the video you want to update.</param>
/// <param name="videoUpdatePayload"></param>
        
        /// <returns>Video</returns>
		public Task<Video> updateAsync(string videoId, VideoUpdatePayload videoUpdatePayload, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<Video>> localVarResponse = updateWithHttpInfoAsync(videoId, videoUpdatePayload, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<Video>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// Update a video object Updates the parameters associated with a video ID. The video object you are updating is determined by the video ID you provide. 
        /// 
        /// 
        /// 
        /// NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it.
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video ID for the video you want to update.</param>
/// <param name="videoUpdatePayload"></param>
        
        /// <returns>Video</returns>
		public Video update(string videoId, VideoUpdatePayload videoUpdatePayload)
        {
             ApiResponse<Video> localVarResponse = updateWithHttpInfo(videoId, videoUpdatePayload);
             return localVarResponse.Data;
        }


        /// <summary>
        /// Update a video object Updates the parameters associated with a video ID. The video object you are updating is determined by the video ID you provide. 
        /// 
        /// 
        /// 
        /// NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it.
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">The video ID for the video you want to update.</param>
/// <param name="videoUpdatePayload"></param>
        
        /// <returns>ApiResponse of Video</returns>
		public Task<ApiResponse<Video>> updateWithHttpInfoAsync(string videoId, VideoUpdatePayload videoUpdatePayload, CancellationToken cancellationToken = default)
        {
            if (videoUpdatePayload == null) 
                throw new ApiException(400,"Missing required parameter 'videoUpdatePayload' when calling VideosApi->update");
            
                                                                                                                        
            if (videoUpdatePayload == null) 
                throw new ApiException(400,"Missing required parameter 'videoUpdatePayload' when calling VideosApi->update");
            
                                                                                                                        
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->update");
            // verify the required parameter 'videoUpdatePayload' is set
            if (videoUpdatePayload == null)
                throw new ApiException(400, "Missing required parameter 'videoUpdatePayload' when calling VideosApi->update");
            

            var localVarPath = "/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (videoUpdatePayload != null && videoUpdatePayload.GetType() != typeof(byte[]) && videoUpdatePayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(videoUpdatePayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoUpdatePayload; // byte array
            }


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<Video>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (Video) this.ApiClient.Deserialize(task.Result, typeof(Video)));
            });
            
        }


        /// <summary>
        /// Update a video object Updates the parameters associated with a video ID. The video object you are updating is determined by the video ID you provide. 
        /// 
        /// 
        /// 
        /// NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it.
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video ID for the video you want to update.</param>
/// <param name="videoUpdatePayload"></param>
        
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> updateWithHttpInfo(string videoId, VideoUpdatePayload videoUpdatePayload)
        {
            if (videoUpdatePayload == null) 
                throw new ApiException(400,"Missing required parameter 'videoUpdatePayload' when calling VideosApi->update");
            
                                                                                                                        
            if (videoUpdatePayload == null) 
                throw new ApiException(400,"Missing required parameter 'videoUpdatePayload' when calling VideosApi->update");
            
                                                                                                                        
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->update");
            // verify the required parameter 'videoUpdatePayload' is set
            if (videoUpdatePayload == null)
                throw new ApiException(400, "Missing required parameter 'videoUpdatePayload' when calling VideosApi->update");
            

            var localVarPath = "/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (videoUpdatePayload != null && videoUpdatePayload.GetType() != typeof(byte[]) && videoUpdatePayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(videoUpdatePayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoUpdatePayload; // byte array
            }


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
        }

        
        /// <summary>
        /// Delete a video object If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. By default, deleted videos cannot be recovered. If you have the Video Restore feature enabled, this operation will discard the video instead of permanently deleting it. Make sure you subscribe to the Video Restore feature if you want to be able to restore deleted videos! The Video Restore feature retains videos for 90 days, after which the videos are permanently deleted
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">The video ID for the video you want to delete.</param>
        
        /// <returns></returns>
		public Task<ApiResponse<object>> deleteAsync(string videoId, CancellationToken cancellationToken = default)
        {
             return deleteWithHttpInfoAsync(videoId, cancellationToken);
        }

        /// <summary>
        /// Delete a video object If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. By default, deleted videos cannot be recovered. If you have the Video Restore feature enabled, this operation will discard the video instead of permanently deleting it. Make sure you subscribe to the Video Restore feature if you want to be able to restore deleted videos! The Video Restore feature retains videos for 90 days, after which the videos are permanently deleted
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video ID for the video you want to delete.</param>
        
        /// <returns></returns>
		public void delete(string videoId)
        {
             deleteWithHttpInfo(videoId);
        }


        /// <summary>
        /// Delete a video object If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. By default, deleted videos cannot be recovered. If you have the Video Restore feature enabled, this operation will discard the video instead of permanently deleting it. Make sure you subscribe to the Video Restore feature if you want to be able to restore deleted videos! The Video Restore feature retains videos for 90 days, after which the videos are permanently deleted
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">The video ID for the video you want to delete.</param>
        
        /// <returns>ApiResponse of Object(void)</returns>
		public Task<ApiResponse<Object>> deleteWithHttpInfoAsync(string videoId, CancellationToken cancellationToken = default)
        {

            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->delete");
            

            var localVarPath = "/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);

            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<Object>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    null);
            });
            
        }


        /// <summary>
        /// Delete a video object If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. By default, deleted videos cannot be recovered. If you have the Video Restore feature enabled, this operation will discard the video instead of permanently deleting it. Make sure you subscribe to the Video Restore feature if you want to be able to restore deleted videos! The Video Restore feature retains videos for 90 days, after which the videos are permanently deleted
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video ID for the video you want to delete.</param>
        
        /// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> deleteWithHttpInfo(string videoId)
        {

            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->delete");
            

            var localVarPath = "/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
            
        }

        
        /// <summary>
        /// List all video objects This method returns a list of your videos (with all their details). With no parameters added, the API returns the first page of all videos. You can filter videos using the parameters described below.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="title">The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)</param>
/// <param name="tags">A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)</param>
/// <param name="metadata">Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. (optional)</param>
/// <param name="description">Retrieve video objects by &#x60;description&#x60;. (optional)</param>
/// <param name="liveStreamId">Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;. (optional)</param>
/// <param name="sortBy">Use this parameter to sort videos by the their created time, published time, updated time, or by title. (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>VideosListResponse</returns>
		public Task<VideosListResponse> listAsync(string title = default, List<string> tags = default, Dictionary<string, string> metadata = default, string description = default, string liveStreamId = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<VideosListResponse>> localVarResponse = listWithHttpInfoAsync(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<VideosListResponse>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// List all video objects This method returns a list of your videos (with all their details). With no parameters added, the API returns the first page of all videos. You can filter videos using the parameters described below.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)</param>
/// <param name="tags">A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)</param>
/// <param name="metadata">Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. (optional)</param>
/// <param name="description">Retrieve video objects by &#x60;description&#x60;. (optional)</param>
/// <param name="liveStreamId">Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;. (optional)</param>
/// <param name="sortBy">Use this parameter to sort videos by the their created time, published time, updated time, or by title. (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>VideosListResponse</returns>
		public VideosListResponse list(string title = default, List<string> tags = default, Dictionary<string, string> metadata = default, string description = default, string liveStreamId = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<VideosListResponse> localVarResponse = listWithHttpInfo(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize);
             return localVarResponse.Data;
        }


        /// <summary>
        /// List all video objects This method returns a list of your videos (with all their details). With no parameters added, the API returns the first page of all videos. You can filter videos using the parameters described below.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="title">The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)</param>
/// <param name="tags">A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)</param>
/// <param name="metadata">Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. (optional)</param>
/// <param name="description">Retrieve video objects by &#x60;description&#x60;. (optional)</param>
/// <param name="liveStreamId">Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;. (optional)</param>
/// <param name="sortBy">Use this parameter to sort videos by the their created time, published time, updated time, or by title. (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of VideosListResponse</returns>
		public Task<ApiResponse<VideosListResponse>> listWithHttpInfoAsync(string title = default, List<string> tags = default, Dictionary<string, string> metadata = default, string description = default, string liveStreamId = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default, CancellationToken cancellationToken = default)
        {









            

            var localVarPath = "/videos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (title != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("multi", "tags[]", tags)); // query parameter
            if (metadata != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "metadata", metadata)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<VideosListResponse>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (VideosListResponse) this.ApiClient.Deserialize(task.Result, typeof(VideosListResponse)));
            });
            
        }


        /// <summary>
        /// List all video objects This method returns a list of your videos (with all their details). With no parameters added, the API returns the first page of all videos. You can filter videos using the parameters described below.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)</param>
/// <param name="tags">A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)</param>
/// <param name="metadata">Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. (optional)</param>
/// <param name="description">Retrieve video objects by &#x60;description&#x60;. (optional)</param>
/// <param name="liveStreamId">Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;. (optional)</param>
/// <param name="sortBy">Use this parameter to sort videos by the their created time, published time, updated time, or by title. (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of VideosListResponse</returns>
		public ApiResponse<VideosListResponse> listWithHttpInfo(string title = default, List<string> tags = default, Dictionary<string, string> metadata = default, string description = default, string liveStreamId = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {









            

            var localVarPath = "/videos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (title != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("multi", "tags[]", tags)); // query parameter
            if (metadata != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "metadata", metadata)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<VideosListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VideosListResponse) this.ApiClient.Deserialize(localVarResponse, typeof(VideosListResponse)));
            
        }

        
        /// <summary>
        /// This method returns a list of your videos (with all their details). With no parameters added, the API returns the first page of all videos. You can filter videos using the parameters described below.
        /// </summary>
        /// <returns>APIlistRequest</returns>
        public APIlistRequest list() {
            return new APIlistRequest(this);
        }

        /// <summary>
        /// Request list class to get paginated list of items
        /// </summary>
        public class APIlistRequest {
            private string title;
            private List<string> tags;
            private Dictionary<string, string> metadata;
            private string description;
            private string liveStreamId;
            private string sortBy;
            private string sortOrder;
            private int? currentPage;
            private int? pageSize;

            private VideosApi currentApiInstance;

            /// <summary>
            /// Class constructor with api instance
            /// </summary>
            /// <param name="instance">Instance of the current api</param>
            public APIlistRequest(VideosApi instance) {
                this.currentApiInstance = instance;
            }

            /// <summary>
            /// Set title
            /// </summary>
            /// <param name="title">The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest Title(string title) {
                this.title = title;
                return this;
            }

            /// <summary>
            /// Set tags
            /// </summary>
            /// <param name="tags">A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest Tags(List<string> tags) {
                this.tags = tags;
                return this;
            }

            /// <summary>
            /// Set metadata
            /// </summary>
            /// <param name="metadata">Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest Metadata(Dictionary<string, string> metadata) {
                this.metadata = metadata;
                return this;
            }

            /// <summary>
            /// Set description
            /// </summary>
            /// <param name="description">Retrieve video objects by &#x60;description&#x60;. (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest Description(string description) {
                this.description = description;
                return this;
            }

            /// <summary>
            /// Set liveStreamId
            /// </summary>
            /// <param name="liveStreamId">Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;. (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest LiveStreamId(string liveStreamId) {
                this.liveStreamId = liveStreamId;
                return this;
            }

            /// <summary>
            /// Set sortBy
            /// </summary>
            /// <param name="sortBy">Use this parameter to sort videos by the their created time, published time, updated time, or by title. (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest SortBy(string sortBy) {
                this.sortBy = sortBy;
                return this;
            }

            /// <summary>
            /// Set sortOrder
            /// </summary>
            /// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest SortOrder(string sortOrder) {
                this.sortOrder = sortOrder;
                return this;
            }

            /// <summary>
            /// Set currentPage
            /// </summary>
            /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest CurrentPage(int? currentPage) {
                this.currentPage = currentPage;
                return this;
            }

            /// <summary>
            /// Set pageSize
            /// </summary>
            /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest PageSize(int? pageSize) {
                this.pageSize = pageSize;
                return this;
            }

            

            /// <summary>
            /// Execute list request
            /// </summary>
            /// <returns>VideosListResponse </returns>
            public Page<Video> execute(){
                ApiResponse<VideosListResponse> localVarResp = this.currentApiInstance.listWithHttpInfo(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize);
                return new Page<Video>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                    try {
                        return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                    } catch (ApiException e) {
                        throw new Exception(e.Message);
                    }
                }); 
            }

            private APIlistRequest copy() {
                APIlistRequest copy = new APIlistRequest( this.currentApiInstance);
                copy.Title(title);
                copy.Tags(tags);
                copy.Metadata(metadata);
                copy.Description(description);
                copy.LiveStreamId(liveStreamId);
                copy.SortBy(sortBy);
                copy.SortOrder(sortOrder);
                copy.CurrentPage(currentPage);
                copy.PageSize(pageSize);
                return copy;
            }
        }
        /// <summary>
        /// Upload a thumbnail The thumbnail is the poster that appears in the player window before video playback begins.
        /// 
        /// 
        /// 
        /// This endpoint allows you to upload an image for the thumbnail.
        /// 
        /// 
        /// 
        /// To select a still frame from the video using a time stamp, use the [dedicated method](#pickThumbnail) to pick a time in the video.
        /// 
        /// 
        /// 
        /// Note: There may be a short delay before the new thumbnail is delivered to our CDN.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">Unique identifier of the chosen video </param>
/// <param name="file">The image to be added as a thumbnail. The mime type should be image/jpeg, image/png or image/webp. The max allowed size is 8 MiB.</param>
        
        /// <returns>Video</returns>
		public Task<Video> uploadThumbnailAsync(string videoId, System.IO.Stream file, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<Video>> localVarResponse = uploadThumbnailWithHttpInfoAsync(videoId, file, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<Video>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// Upload a thumbnail The thumbnail is the poster that appears in the player window before video playback begins.
        /// 
        /// 
        /// 
        /// This endpoint allows you to upload an image for the thumbnail.
        /// 
        /// 
        /// 
        /// To select a still frame from the video using a time stamp, use the [dedicated method](#pickThumbnail) to pick a time in the video.
        /// 
        /// 
        /// 
        /// Note: There may be a short delay before the new thumbnail is delivered to our CDN.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Unique identifier of the chosen video </param>
/// <param name="file">The image to be added as a thumbnail. The mime type should be image/jpeg, image/png or image/webp. The max allowed size is 8 MiB.</param>
        
        /// <returns>Video</returns>
		public Video uploadThumbnail(string videoId, System.IO.Stream file)
        {
             ApiResponse<Video> localVarResponse = uploadThumbnailWithHttpInfo(videoId, file);
             return localVarResponse.Data;
        }


        /// <summary>
        /// Upload a thumbnail The thumbnail is the poster that appears in the player window before video playback begins.
        /// 
        /// 
        /// 
        /// This endpoint allows you to upload an image for the thumbnail.
        /// 
        /// 
        /// 
        /// To select a still frame from the video using a time stamp, use the [dedicated method](#pickThumbnail) to pick a time in the video.
        /// 
        /// 
        /// 
        /// Note: There may be a short delay before the new thumbnail is delivered to our CDN.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">Unique identifier of the chosen video </param>
/// <param name="file">The image to be added as a thumbnail. The mime type should be image/jpeg, image/png or image/webp. The max allowed size is 8 MiB.</param>
        
        /// <returns>ApiResponse of Video</returns>
		public Task<ApiResponse<Video>> uploadThumbnailWithHttpInfoAsync(string videoId, System.IO.Stream file, CancellationToken cancellationToken = default)
        {


            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->uploadThumbnail");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling VideosApi->uploadThumbnail");
            

            var localVarPath = "/videos/{videoId}/thumbnail";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            


            
            if (file != null) 
                localVarFileParams.Add("file", this.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<Video>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (Video) this.ApiClient.Deserialize(task.Result, typeof(Video)));
            });
            
        }


        /// <summary>
        /// Upload a thumbnail The thumbnail is the poster that appears in the player window before video playback begins.
        /// 
        /// 
        /// 
        /// This endpoint allows you to upload an image for the thumbnail.
        /// 
        /// 
        /// 
        /// To select a still frame from the video using a time stamp, use the [dedicated method](#pickThumbnail) to pick a time in the video.
        /// 
        /// 
        /// 
        /// Note: There may be a short delay before the new thumbnail is delivered to our CDN.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Unique identifier of the chosen video </param>
/// <param name="file">The image to be added as a thumbnail. The mime type should be image/jpeg, image/png or image/webp. The max allowed size is 8 MiB.</param>
        
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> uploadThumbnailWithHttpInfo(string videoId, System.IO.Stream file)
        {


            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->uploadThumbnail");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling VideosApi->uploadThumbnail");
            

            var localVarPath = "/videos/{videoId}/thumbnail";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            


            
            if (file != null) 
                localVarFileParams.Add("file", this.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
        }

        
        /// <summary>
        /// Set a thumbnail Pick a thumbnail from the given time code. 
        /// 
        /// 
        /// 
        /// If you&#39;d like to upload an image for your thumbnail, use the dedicated [method](#uploadThumbnail). 
        /// 
        /// 
        /// 
        /// There may be a short delay for the thumbnail to update.
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.</param>
/// <param name="videoThumbnailPickPayload"></param>
        
        /// <returns>Video</returns>
		public Task<Video> pickThumbnailAsync(string videoId, VideoThumbnailPickPayload videoThumbnailPickPayload, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<Video>> localVarResponse = pickThumbnailWithHttpInfoAsync(videoId, videoThumbnailPickPayload, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<Video>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// Set a thumbnail Pick a thumbnail from the given time code. 
        /// 
        /// 
        /// 
        /// If you&#39;d like to upload an image for your thumbnail, use the dedicated [method](#uploadThumbnail). 
        /// 
        /// 
        /// 
        /// There may be a short delay for the thumbnail to update.
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.</param>
/// <param name="videoThumbnailPickPayload"></param>
        
        /// <returns>Video</returns>
		public Video pickThumbnail(string videoId, VideoThumbnailPickPayload videoThumbnailPickPayload)
        {
             ApiResponse<Video> localVarResponse = pickThumbnailWithHttpInfo(videoId, videoThumbnailPickPayload);
             return localVarResponse.Data;
        }


        /// <summary>
        /// Set a thumbnail Pick a thumbnail from the given time code. 
        /// 
        /// 
        /// 
        /// If you&#39;d like to upload an image for your thumbnail, use the dedicated [method](#uploadThumbnail). 
        /// 
        /// 
        /// 
        /// There may be a short delay for the thumbnail to update.
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.</param>
/// <param name="videoThumbnailPickPayload"></param>
        
        /// <returns>ApiResponse of Video</returns>
		public Task<ApiResponse<Video>> pickThumbnailWithHttpInfoAsync(string videoId, VideoThumbnailPickPayload videoThumbnailPickPayload, CancellationToken cancellationToken = default)
        {
            if (videoThumbnailPickPayload == null) 
                throw new ApiException(400,"Missing required parameter 'videoThumbnailPickPayload' when calling VideosApi->pickThumbnail");
            
            if (videoThumbnailPickPayload != null && videoThumbnailPickPayload.timecode == null) {
                throw new ApiException(400,"Missing required parameter 'videoThumbnailPickPayload.Timecode' when calling VideosApi->pickThumbnail");
            }
            
            if (videoThumbnailPickPayload == null) 
                throw new ApiException(400,"Missing required parameter 'videoThumbnailPickPayload' when calling VideosApi->pickThumbnail");
            
            if (videoThumbnailPickPayload != null && videoThumbnailPickPayload.timecode == null) {
                throw new ApiException(400,"Missing required parameter 'videoThumbnailPickPayload.Timecode' when calling VideosApi->pickThumbnail");
            }
            
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->pickThumbnail");
            // verify the required parameter 'videoThumbnailPickPayload' is set
            if (videoThumbnailPickPayload == null)
                throw new ApiException(400, "Missing required parameter 'videoThumbnailPickPayload' when calling VideosApi->pickThumbnail");
            

            var localVarPath = "/videos/{videoId}/thumbnail";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (videoThumbnailPickPayload != null && videoThumbnailPickPayload.GetType() != typeof(byte[]) && videoThumbnailPickPayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(videoThumbnailPickPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoThumbnailPickPayload; // byte array
            }


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<Video>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (Video) this.ApiClient.Deserialize(task.Result, typeof(Video)));
            });
            
        }


        /// <summary>
        /// Set a thumbnail Pick a thumbnail from the given time code. 
        /// 
        /// 
        /// 
        /// If you&#39;d like to upload an image for your thumbnail, use the dedicated [method](#uploadThumbnail). 
        /// 
        /// 
        /// 
        /// There may be a short delay for the thumbnail to update.
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.</param>
/// <param name="videoThumbnailPickPayload"></param>
        
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> pickThumbnailWithHttpInfo(string videoId, VideoThumbnailPickPayload videoThumbnailPickPayload)
        {
            if (videoThumbnailPickPayload == null) 
                throw new ApiException(400,"Missing required parameter 'videoThumbnailPickPayload' when calling VideosApi->pickThumbnail");
            
            if (videoThumbnailPickPayload != null && videoThumbnailPickPayload.timecode == null) {
                throw new ApiException(400,"Missing required parameter 'videoThumbnailPickPayload.Timecode' when calling VideosApi->pickThumbnail");
            }
            
            if (videoThumbnailPickPayload == null) 
                throw new ApiException(400,"Missing required parameter 'videoThumbnailPickPayload' when calling VideosApi->pickThumbnail");
            
            if (videoThumbnailPickPayload != null && videoThumbnailPickPayload.timecode == null) {
                throw new ApiException(400,"Missing required parameter 'videoThumbnailPickPayload.Timecode' when calling VideosApi->pickThumbnail");
            }
            
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->pickThumbnail");
            // verify the required parameter 'videoThumbnailPickPayload' is set
            if (videoThumbnailPickPayload == null)
                throw new ApiException(400, "Missing required parameter 'videoThumbnailPickPayload' when calling VideosApi->pickThumbnail");
            

            var localVarPath = "/videos/{videoId}/thumbnail";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (videoThumbnailPickPayload != null && videoThumbnailPickPayload.GetType() != typeof(byte[]) && videoThumbnailPickPayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(videoThumbnailPickPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoThumbnailPickPayload; // byte array
            }


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
        }

        
        /// <summary>
        /// Retrieve a discarded video object This call provides the same information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">The unique identifier for the video you want details about.</param>
        
        /// <returns>Video</returns>
		public Task<Video> getDiscardedAsync(string videoId, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<Video>> localVarResponse = getDiscardedWithHttpInfoAsync(videoId, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<Video>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// Retrieve a discarded video object This call provides the same information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want details about.</param>
        
        /// <returns>Video</returns>
		public Video getDiscarded(string videoId)
        {
             ApiResponse<Video> localVarResponse = getDiscardedWithHttpInfo(videoId);
             return localVarResponse.Data;
        }


        /// <summary>
        /// Retrieve a discarded video object This call provides the same information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">The unique identifier for the video you want details about.</param>
        
        /// <returns>ApiResponse of Video</returns>
		public Task<ApiResponse<Video>> getDiscardedWithHttpInfoAsync(string videoId, CancellationToken cancellationToken = default)
        {

            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->getDiscarded");
            

            var localVarPath = "/discarded/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<Video>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (Video) this.ApiClient.Deserialize(task.Result, typeof(Video)));
            });
            
        }


        /// <summary>
        /// Retrieve a discarded video object This call provides the same information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want details about.</param>
        
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> getDiscardedWithHttpInfo(string videoId)
        {

            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->getDiscarded");
            

            var localVarPath = "/discarded/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
        }

        
        /// <summary>
        /// Retrieve video status and details This method provides upload status &amp; encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">The unique identifier for the video you want the status for.</param>
        
        /// <returns>VideoStatus</returns>
		public Task<VideoStatus> getStatusAsync(string videoId, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<VideoStatus>> localVarResponse = getStatusWithHttpInfoAsync(videoId, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<VideoStatus>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// Retrieve video status and details This method provides upload status &amp; encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want the status for.</param>
        
        /// <returns>VideoStatus</returns>
		public VideoStatus getStatus(string videoId)
        {
             ApiResponse<VideoStatus> localVarResponse = getStatusWithHttpInfo(videoId);
             return localVarResponse.Data;
        }


        /// <summary>
        /// Retrieve video status and details This method provides upload status &amp; encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">The unique identifier for the video you want the status for.</param>
        
        /// <returns>ApiResponse of VideoStatus</returns>
		public Task<ApiResponse<VideoStatus>> getStatusWithHttpInfoAsync(string videoId, CancellationToken cancellationToken = default)
        {

            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->getStatus");
            

            var localVarPath = "/videos/{videoId}/status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<VideoStatus>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (VideoStatus) this.ApiClient.Deserialize(task.Result, typeof(VideoStatus)));
            });
            
        }


        /// <summary>
        /// Retrieve video status and details This method provides upload status &amp; encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The unique identifier for the video you want the status for.</param>
        
        /// <returns>ApiResponse of VideoStatus</returns>
		public ApiResponse<VideoStatus> getStatusWithHttpInfo(string videoId)
        {

            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->getStatus");
            

            var localVarPath = "/videos/{videoId}/status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<VideoStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VideoStatus) this.ApiClient.Deserialize(localVarResponse, typeof(VideoStatus)));
            
        }

        
        /// <summary>
        /// List all discarded video objects This method returns a list of your discarded videos (with all their details). With no parameters added, the API returns the first page of all discarded videos. You can filter discarded videos using the parameters described below.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="title">The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)</param>
/// <param name="tags">A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)</param>
/// <param name="metadata">Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. (optional)</param>
/// <param name="description">Retrieve video objects by &#x60;description&#x60;. (optional)</param>
/// <param name="liveStreamId">Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;. (optional)</param>
/// <param name="sortBy">Use this parameter to sort videos by the their created time, published time, updated time, or by title. (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>VideosListResponse</returns>
		public Task<VideosListResponse> listDiscardedAsync(string title = default, List<string> tags = default, Dictionary<string, string> metadata = default, string description = default, string liveStreamId = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<VideosListResponse>> localVarResponse = listDiscardedWithHttpInfoAsync(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<VideosListResponse>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// List all discarded video objects This method returns a list of your discarded videos (with all their details). With no parameters added, the API returns the first page of all discarded videos. You can filter discarded videos using the parameters described below.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)</param>
/// <param name="tags">A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)</param>
/// <param name="metadata">Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. (optional)</param>
/// <param name="description">Retrieve video objects by &#x60;description&#x60;. (optional)</param>
/// <param name="liveStreamId">Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;. (optional)</param>
/// <param name="sortBy">Use this parameter to sort videos by the their created time, published time, updated time, or by title. (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>VideosListResponse</returns>
		public VideosListResponse listDiscarded(string title = default, List<string> tags = default, Dictionary<string, string> metadata = default, string description = default, string liveStreamId = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<VideosListResponse> localVarResponse = listDiscardedWithHttpInfo(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize);
             return localVarResponse.Data;
        }


        /// <summary>
        /// List all discarded video objects This method returns a list of your discarded videos (with all their details). With no parameters added, the API returns the first page of all discarded videos. You can filter discarded videos using the parameters described below.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="title">The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)</param>
/// <param name="tags">A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)</param>
/// <param name="metadata">Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. (optional)</param>
/// <param name="description">Retrieve video objects by &#x60;description&#x60;. (optional)</param>
/// <param name="liveStreamId">Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;. (optional)</param>
/// <param name="sortBy">Use this parameter to sort videos by the their created time, published time, updated time, or by title. (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of VideosListResponse</returns>
		public Task<ApiResponse<VideosListResponse>> listDiscardedWithHttpInfoAsync(string title = default, List<string> tags = default, Dictionary<string, string> metadata = default, string description = default, string liveStreamId = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default, CancellationToken cancellationToken = default)
        {









            

            var localVarPath = "/discarded/videos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (title != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("multi", "tags[]", tags)); // query parameter
            if (metadata != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "metadata", metadata)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<VideosListResponse>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (VideosListResponse) this.ApiClient.Deserialize(task.Result, typeof(VideosListResponse)));
            });
            
        }


        /// <summary>
        /// List all discarded video objects This method returns a list of your discarded videos (with all their details). With no parameters added, the API returns the first page of all discarded videos. You can filter discarded videos using the parameters described below.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)</param>
/// <param name="tags">A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)</param>
/// <param name="metadata">Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. (optional)</param>
/// <param name="description">Retrieve video objects by &#x60;description&#x60;. (optional)</param>
/// <param name="liveStreamId">Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;. (optional)</param>
/// <param name="sortBy">Use this parameter to sort videos by the their created time, published time, updated time, or by title. (optional)</param>
/// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of VideosListResponse</returns>
		public ApiResponse<VideosListResponse> listDiscardedWithHttpInfo(string title = default, List<string> tags = default, Dictionary<string, string> metadata = default, string description = default, string liveStreamId = default, string sortBy = default, string sortOrder = default, int? currentPage = default, int? pageSize = default)
        {









            

            var localVarPath = "/discarded/videos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (title != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("multi", "tags[]", tags)); // query parameter
            if (metadata != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "metadata", metadata)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<VideosListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VideosListResponse) this.ApiClient.Deserialize(localVarResponse, typeof(VideosListResponse)));
            
        }

        
        /// <summary>
        /// This method returns a list of your discarded videos (with all their details). With no parameters added, the API returns the first page of all discarded videos. You can filter discarded videos using the parameters described below.
        /// </summary>
        /// <returns>APIlistDiscardedRequest</returns>
        public APIlistDiscardedRequest listDiscarded() {
            return new APIlistDiscardedRequest(this);
        }

        /// <summary>
        /// Request listDiscarded class to get paginated list of items
        /// </summary>
        public class APIlistDiscardedRequest {
            private string title;
            private List<string> tags;
            private Dictionary<string, string> metadata;
            private string description;
            private string liveStreamId;
            private string sortBy;
            private string sortOrder;
            private int? currentPage;
            private int? pageSize;

            private VideosApi currentApiInstance;

            /// <summary>
            /// Class constructor with api instance
            /// </summary>
            /// <param name="instance">Instance of the current api</param>
            public APIlistDiscardedRequest(VideosApi instance) {
                this.currentApiInstance = instance;
            }

            /// <summary>
            /// Set title
            /// </summary>
            /// <param name="title">The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)</param>
            /// <returns>APIlistDiscardedRequest</returns>
            public APIlistDiscardedRequest Title(string title) {
                this.title = title;
                return this;
            }

            /// <summary>
            /// Set tags
            /// </summary>
            /// <param name="tags">A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)</param>
            /// <returns>APIlistDiscardedRequest</returns>
            public APIlistDiscardedRequest Tags(List<string> tags) {
                this.tags = tags;
                return this;
            }

            /// <summary>
            /// Set metadata
            /// </summary>
            /// <param name="metadata">Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. (optional)</param>
            /// <returns>APIlistDiscardedRequest</returns>
            public APIlistDiscardedRequest Metadata(Dictionary<string, string> metadata) {
                this.metadata = metadata;
                return this;
            }

            /// <summary>
            /// Set description
            /// </summary>
            /// <param name="description">Retrieve video objects by &#x60;description&#x60;. (optional)</param>
            /// <returns>APIlistDiscardedRequest</returns>
            public APIlistDiscardedRequest Description(string description) {
                this.description = description;
                return this;
            }

            /// <summary>
            /// Set liveStreamId
            /// </summary>
            /// <param name="liveStreamId">Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;. (optional)</param>
            /// <returns>APIlistDiscardedRequest</returns>
            public APIlistDiscardedRequest LiveStreamId(string liveStreamId) {
                this.liveStreamId = liveStreamId;
                return this;
            }

            /// <summary>
            /// Set sortBy
            /// </summary>
            /// <param name="sortBy">Use this parameter to sort videos by the their created time, published time, updated time, or by title. (optional)</param>
            /// <returns>APIlistDiscardedRequest</returns>
            public APIlistDiscardedRequest SortBy(string sortBy) {
                this.sortBy = sortBy;
                return this;
            }

            /// <summary>
            /// Set sortOrder
            /// </summary>
            /// <param name="sortOrder">Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)</param>
            /// <returns>APIlistDiscardedRequest</returns>
            public APIlistDiscardedRequest SortOrder(string sortOrder) {
                this.sortOrder = sortOrder;
                return this;
            }

            /// <summary>
            /// Set currentPage
            /// </summary>
            /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
            /// <returns>APIlistDiscardedRequest</returns>
            public APIlistDiscardedRequest CurrentPage(int? currentPage) {
                this.currentPage = currentPage;
                return this;
            }

            /// <summary>
            /// Set pageSize
            /// </summary>
            /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
            /// <returns>APIlistDiscardedRequest</returns>
            public APIlistDiscardedRequest PageSize(int? pageSize) {
                this.pageSize = pageSize;
                return this;
            }

            

            /// <summary>
            /// Execute listDiscarded request
            /// </summary>
            /// <returns>VideosListResponse </returns>
            public Page<Video> execute(){
                ApiResponse<VideosListResponse> localVarResp = this.currentApiInstance.listDiscardedWithHttpInfo(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize);
                return new Page<Video>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                    try {
                        return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                    } catch (ApiException e) {
                        throw new Exception(e.Message);
                    }
                }); 
            }

            private APIlistDiscardedRequest copy() {
                APIlistDiscardedRequest copy = new APIlistDiscardedRequest( this.currentApiInstance);
                copy.Title(title);
                copy.Tags(tags);
                copy.Metadata(metadata);
                copy.Description(description);
                copy.LiveStreamId(liveStreamId);
                copy.SortBy(sortBy);
                copy.SortOrder(sortOrder);
                copy.CurrentPage(currentPage);
                copy.PageSize(pageSize);
                return copy;
            }
        }
        /// <summary>
        /// Update a discarded video object Use this endpoint to restore a discarded video when you have the Video Restore feature enabled.
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">The video ID for the video you want to restore.</param>
/// <param name="discardedVideoUpdatePayload"></param>
        
        /// <returns>Video</returns>
		public Task<Video> updateDiscardedAsync(string videoId, DiscardedVideoUpdatePayload discardedVideoUpdatePayload, CancellationToken cancellationToken = default)
        {
             Task<ApiResponse<Video>> localVarResponse = updateDiscardedWithHttpInfoAsync(videoId, discardedVideoUpdatePayload, cancellationToken);
             return localVarResponse.ContinueWith((Task<ApiResponse<Video>> task) => task.Result.Data );
             
        }

        /// <summary>
        /// Update a discarded video object Use this endpoint to restore a discarded video when you have the Video Restore feature enabled.
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video ID for the video you want to restore.</param>
/// <param name="discardedVideoUpdatePayload"></param>
        
        /// <returns>Video</returns>
		public Video updateDiscarded(string videoId, DiscardedVideoUpdatePayload discardedVideoUpdatePayload)
        {
             ApiResponse<Video> localVarResponse = updateDiscardedWithHttpInfo(videoId, discardedVideoUpdatePayload);
             return localVarResponse.Data;
        }


        /// <summary>
        /// Update a discarded video object Use this endpoint to restore a discarded video when you have the Video Restore feature enabled.
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. (optional)</param>
        /// <param name="videoId">The video ID for the video you want to restore.</param>
/// <param name="discardedVideoUpdatePayload"></param>
        
        /// <returns>ApiResponse of Video</returns>
		public Task<ApiResponse<Video>> updateDiscardedWithHttpInfoAsync(string videoId, DiscardedVideoUpdatePayload discardedVideoUpdatePayload, CancellationToken cancellationToken = default)
        {
            if (discardedVideoUpdatePayload == null) 
                throw new ApiException(400,"Missing required parameter 'discardedVideoUpdatePayload' when calling VideosApi->updateDiscarded");
            
            
            if (discardedVideoUpdatePayload == null) 
                throw new ApiException(400,"Missing required parameter 'discardedVideoUpdatePayload' when calling VideosApi->updateDiscarded");
            
            
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->updateDiscarded");
            // verify the required parameter 'discardedVideoUpdatePayload' is set
            if (discardedVideoUpdatePayload == null)
                throw new ApiException(400, "Missing required parameter 'discardedVideoUpdatePayload' when calling VideosApi->updateDiscarded");
            

            var localVarPath = "/discarded/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (discardedVideoUpdatePayload != null && discardedVideoUpdatePayload.GetType() != typeof(byte[]) && discardedVideoUpdatePayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(discardedVideoUpdatePayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = discardedVideoUpdatePayload; // byte array
            }


            

            // make the HTTP request
            Task<RestResponse> localVarResponse = (Task<RestResponse>) this.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType, cancellationToken);


            return localVarResponse.ContinueWith((Task<RestResponse> task) =>
            {
                int localVarStatusCode = (int) task.Result.StatusCode;
                return new ApiResponse<Video>(localVarStatusCode,
                    task.Result.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (Video) this.ApiClient.Deserialize(task.Result, typeof(Video)));
            });
            
        }


        /// <summary>
        /// Update a discarded video object Use this endpoint to restore a discarded video when you have the Video Restore feature enabled.
        /// 
        /// 
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video ID for the video you want to restore.</param>
/// <param name="discardedVideoUpdatePayload"></param>
        
        /// <returns>ApiResponse of Video</returns>
		public ApiResponse<Video> updateDiscardedWithHttpInfo(string videoId, DiscardedVideoUpdatePayload discardedVideoUpdatePayload)
        {
            if (discardedVideoUpdatePayload == null) 
                throw new ApiException(400,"Missing required parameter 'discardedVideoUpdatePayload' when calling VideosApi->updateDiscarded");
            
            
            if (discardedVideoUpdatePayload == null) 
                throw new ApiException(400,"Missing required parameter 'discardedVideoUpdatePayload' when calling VideosApi->updateDiscarded");
            
            
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->updateDiscarded");
            // verify the required parameter 'discardedVideoUpdatePayload' is set
            if (discardedVideoUpdatePayload == null)
                throw new ApiException(400, "Missing required parameter 'discardedVideoUpdatePayload' when calling VideosApi->updateDiscarded");
            

            var localVarPath = "/discarded/videos/{videoId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarPathParams.Add("videoId", this.ApiClient.ParameterToString(videoId)); // path parameter
            if (discardedVideoUpdatePayload != null && discardedVideoUpdatePayload.GetType() != typeof(byte[]) && discardedVideoUpdatePayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(discardedVideoUpdatePayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = discardedVideoUpdatePayload; // byte array
            }


            

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Video) this.ApiClient.Deserialize(localVarResponse, typeof(Video)));
            
        }

        

    }

}
