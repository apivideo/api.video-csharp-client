/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.IO;
using ApiVideo.Upload;
using RestSharp;
using ApiVideo.Client;
using ApiVideo.Model;

namespace ApiVideo.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WebhooksApi
    {
        /// <summary>
        /// Api Client Instance
        /// </summary>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Delete a Webhook This endpoint will delete the indicated webhook.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook you wish to delete.</param>
        
        /// <returns></returns>
		public void delete(string webhookId)
        {
             deleteWithHttpInfo(webhookId);
        }

        /// <summary>
        /// Delete a Webhook This endpoint will delete the indicated webhook.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook you wish to delete.</param>
        
        /// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> deleteWithHttpInfo(string webhookId)
        {

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->delete");
            

            var localVarPath = "/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.ApiClient.ParameterToString(webhookId)); // path parameter


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
            
        }

        
        /// <summary>
        /// Show Webhook details This call provides the same JSON information provided on Webjhook creation.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The unique webhook you wish to retreive details on.</param>
        
        /// <returns>Webhook</returns>
		public Webhook get(string webhookId)
        {
             ApiResponse<Webhook> localVarResponse = getWithHttpInfo(webhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show Webhook details This call provides the same JSON information provided on Webjhook creation.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The unique webhook you wish to retreive details on.</param>
        
        /// <returns>ApiResponse of Webhook</returns>
		public ApiResponse<Webhook> getWithHttpInfo(string webhookId)
        {

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->get");
            

            var localVarPath = "/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.ApiClient.ParameterToString(webhookId)); // path parameter


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Webhook) this.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
            
        }

        
        /// <summary>
        /// List all webhooks Requests to this endpoint return a list of your webhooks (with all their details). You can filter what the webhook list that the API returns using the parameters described below.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="events">The webhook event that you wish to filter on. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>WebhooksListResponse</returns>
		public WebhooksListResponse list(string events = default, int? currentPage = default, int? pageSize = default)
        {
             ApiResponse<WebhooksListResponse> localVarResponse = listWithHttpInfo(events, currentPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all webhooks Requests to this endpoint return a list of your webhooks (with all their details). You can filter what the webhook list that the API returns using the parameters described below.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="events">The webhook event that you wish to filter on. (optional)</param>
/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
        
        /// <returns>ApiResponse of WebhooksListResponse</returns>
		public ApiResponse<WebhooksListResponse> listWithHttpInfo(string events = default, int? currentPage = default, int? pageSize = default)
        {



            

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (events != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "events", events)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<WebhooksListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhooksListResponse) this.ApiClient.Deserialize(localVarResponse, typeof(WebhooksListResponse)));
            
        }

        
        /// <summary>
        /// Requests to this endpoint return a list of your webhooks (with all their details). You can filter what the webhook list that the API returns using the parameters described below.
        /// </summary>
        /// <returns>APIlistRequest</returns>
        public APIlistRequest list() {
            return new APIlistRequest(this);
        }

        /// <summary>
        /// Request list class to get paginated list of items
        /// </summary>
        public class APIlistRequest {
            private string events;
            private int? currentPage;
            private int? pageSize;

            private WebhooksApi currentApiInstance;

            /// <summary>
            /// Class constructor with api instance
            /// </summary>
            /// <param name="instance">Instance of the current api</param>
            public APIlistRequest(WebhooksApi instance) {
                this.currentApiInstance = instance;
            }

            /// <summary>
            /// Set events
            /// </summary>
            /// <param name="events">The webhook event that you wish to filter on. (optional)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest Events(string events) {
                this.events = events;
                return this;
            }

            /// <summary>
            /// Set currentPage
            /// </summary>
            /// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest CurrentPage(int? currentPage) {
                this.currentPage = currentPage;
                return this;
            }

            /// <summary>
            /// Set pageSize
            /// </summary>
            /// <param name="pageSize">Results per page. Allowed values 1-100, default is 25. (optional, default to 25)</param>
            /// <returns>APIlistRequest</returns>
            public APIlistRequest PageSize(int? pageSize) {
                this.pageSize = pageSize;
                return this;
            }

            

            /// <summary>
            /// Execute list request
            /// </summary>
            /// <returns>WebhooksListResponse </returns>
            public Page<Webhook> execute(){
                ApiResponse<WebhooksListResponse> localVarResp = this.currentApiInstance.listWithHttpInfo(events, currentPage, pageSize);
                return new Page<Webhook>(localVarResp.Data.data, localVarResp.Data.pagination, () => {
                    try {
                        return copy().CurrentPage((currentPage == null ? 1 : currentPage) + 1).execute();
                    } catch (ApiException e) {
                        throw new Exception(e.Message);
                    }
                }); 
            }

            private APIlistRequest copy() {
                APIlistRequest copy = new APIlistRequest( this.currentApiInstance);
                copy.Events(events);
                copy.CurrentPage(currentPage);
                copy.PageSize(pageSize);
                return copy;
            }
        }
        /// <summary>
        /// Create Webhook Webhooks can push notifications to your server, rather than polling api.video for changes. We currently offer four events:  * &#x60;&#x60;&#x60;video.encoding.quality.completed&#x60;&#x60;&#x60; Occurs when a new video is uploaded into your account, it will be encoded into several different HLS and mp4 qualities. When each version is encoded, your webhook will get a notification.  It will look like &#x60;&#x60;&#x60;{ \\\&quot;type\\\&quot;: \\\&quot;video.encoding.quality.completed\\\&quot;, \\\&quot;emittedAt\\\&quot;: \\\&quot;2021-01-29T16:46:25.217+01:00\\\&quot;, \\\&quot;videoId\\\&quot;: \\\&quot;viXXXXXXXX\\\&quot;, \\\&quot;encoding\\\&quot;: \\\&quot;hls\\\&quot;, \\\&quot;quality\\\&quot;: \\\&quot;720p\\\&quot;} &#x60;&#x60;&#x60;. This request says that the 720p HLS encoding was completed. * &#x60;&#x60;&#x60;live-stream.broadcast.started&#x60;&#x60;&#x60;  When a live stream begins broadcasting, the broadcasting parameter changes from false to true, and this webhook fires. * &#x60;&#x60;&#x60;live-stream.broadcast.ended&#x60;&#x60;&#x60;  This event fires when the live stream has finished broadcasting, and the broadcasting parameter flips from false to true. * &#x60;&#x60;&#x60;video.source.recorded&#x60;&#x60;&#x60;  This event occurs when a live stream is recorded and submitted for encoding.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksCreationPayload"></param>
        
        /// <returns>Webhook</returns>
		public Webhook create(WebhooksCreationPayload webhooksCreationPayload)
        {
             ApiResponse<Webhook> localVarResponse = createWithHttpInfo(webhooksCreationPayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Webhook Webhooks can push notifications to your server, rather than polling api.video for changes. We currently offer four events:  * &#x60;&#x60;&#x60;video.encoding.quality.completed&#x60;&#x60;&#x60; Occurs when a new video is uploaded into your account, it will be encoded into several different HLS and mp4 qualities. When each version is encoded, your webhook will get a notification.  It will look like &#x60;&#x60;&#x60;{ \\\&quot;type\\\&quot;: \\\&quot;video.encoding.quality.completed\\\&quot;, \\\&quot;emittedAt\\\&quot;: \\\&quot;2021-01-29T16:46:25.217+01:00\\\&quot;, \\\&quot;videoId\\\&quot;: \\\&quot;viXXXXXXXX\\\&quot;, \\\&quot;encoding\\\&quot;: \\\&quot;hls\\\&quot;, \\\&quot;quality\\\&quot;: \\\&quot;720p\\\&quot;} &#x60;&#x60;&#x60;. This request says that the 720p HLS encoding was completed. * &#x60;&#x60;&#x60;live-stream.broadcast.started&#x60;&#x60;&#x60;  When a live stream begins broadcasting, the broadcasting parameter changes from false to true, and this webhook fires. * &#x60;&#x60;&#x60;live-stream.broadcast.ended&#x60;&#x60;&#x60;  This event fires when the live stream has finished broadcasting, and the broadcasting parameter flips from false to true. * &#x60;&#x60;&#x60;video.source.recorded&#x60;&#x60;&#x60;  This event occurs when a live stream is recorded and submitted for encoding.
        /// </summary>
        /// <exception cref="ApiVideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksCreationPayload"></param>
        
        /// <returns>ApiResponse of Webhook</returns>
		public ApiResponse<Webhook> createWithHttpInfo(WebhooksCreationPayload webhooksCreationPayload)
        {
            if (webhooksCreationPayload == null) 
                throw new ApiException(400,"Missing required parameter 'webhooksCreationPayload' when calling WebhooksApi->create");
            
            if (webhooksCreationPayload != null && webhooksCreationPayload.events == null) {
                throw new ApiException(400,"Missing required parameter 'webhooksCreationPayload.Events' when calling WebhooksApi->create");
            }
                        if (webhooksCreationPayload != null && webhooksCreationPayload.url == null) {
                throw new ApiException(400,"Missing required parameter 'webhooksCreationPayload.Url' when calling WebhooksApi->create");
            }
            
            // verify the required parameter 'webhooksCreationPayload' is set
            if (webhooksCreationPayload == null)
                throw new ApiException(400, "Missing required parameter 'webhooksCreationPayload' when calling WebhooksApi->create");
            

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarContentTypes = new string[] {
                "application/json"
            };
            string localVarContentType = ApiClient.SelectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.Add("Content-Type", localVarContentType);
            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhooksCreationPayload != null && webhooksCreationPayload.GetType() != typeof(byte[]) && webhooksCreationPayload.GetType() != typeof(string))
            {
                localVarPostBody = this.ApiClient.Serialize(webhooksCreationPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhooksCreationPayload; // byte array
            }


            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Webhook) this.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
            
        }

        

    }

}
