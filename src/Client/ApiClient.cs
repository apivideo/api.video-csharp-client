/* 
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.IO;
using System.Threading;
using System.Linq;
using System.Text;
using Newtonsoft.Json;
using RestSharp;

namespace ApiVideo.Client
{
    /// <summary>
    /// API client is mainly responsible for making the HTTP call to the API backend.
    /// </summary>
    public partial class ApiClient
    {
        private const int DEFAULT_CHUNK_SIZE = 50 * 1024 * 1024;
        private const int MIN_CHUNK_SIZE = 5 * 1024 * 1024;
        private const int MAX_CHUNK_SIZE = 128 * 1024 * 1024;

        private readonly JsonSerializerSettings serializerSettings = new JsonSerializerSettings
        {
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            NullValueHandling = NullValueHandling.Ignore,
            Converters =
            {
                new EmptyArrayFixTypeConverter(),
                new NullableStringTypeConverter()
            }
        };
        private AuthenticationManager AuthManager { get; set; }

        /// <summary>
        /// Allows for extending request processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        private RestRequest InterceptRequest(IRestRequest request){
            if(AuthManager != null)
                return AuthManager.Intercept(request) as RestRequest;
            return request as RestRequest;
        }


        /// <summary>
        /// Constructor for ApiClient with custom basePath
        /// </summary>
        /// <param name="basePath">the api base path.</param>
        public ApiClient(string basePath): this(new RestClient(basePath)) {
        }
        
        /// <summary>
        /// Constructor for ApiClient with custom API base path
        /// </summary>
        /// <param name="apiKey">the api key to use to authenticate to the API</param>
        /// <param name="basePath">the api base path.</param>
        public ApiClient(string apiKey,string basePath): this(basePath) {
            this.AuthManager = new AuthenticationManager(apiKey, this);
        }


        /// <summary>
        /// Constructor for ApiClient with custom http client.
        /// </summary>
        /// <param name="client">a RestClient instance used to make API call</param>
        public ApiClient(RestClient client) {
            this.RestClient = client;
            setName("AV-Origin-Client", "csharp", "1.4.0");
        }

        /// <summary>
        /// Set the application name
        /// </summary>
        /// <param name="applicationName">the application name</param>
        public void setApplicationName(string applicationName, string applicationVersion)
        {
            setName("AV-Origin-App", applicationName, applicationVersion);
        }

        /// <summary>
        /// Set the SDK name
        /// </summary>
        /// <param name="applicationName">the application name</param>
        public void setSdkName(string sdkName, string sdkVersion)
        {
            setName("AV-Origin-Sdk", sdkName, sdkVersion);
        }


        private void setName(string key, string name, string version)
        {
            if(name == null)
            {
                throw new Exception("Name cannot be null");
            }

            if(version == null)
            {
                throw new Exception("Version cannot be null");
            }

            if(!isValidName(name))
            {
                throw new Exception("Invalid name value. Allowed characters: A-Z, a-z, 0-9, '-', '_'. Max length: 50.");
            }

            if(!isValidVersion(version))
            {
               throw new Exception("Invalid version value. The version should match the xxx[.yyy][.zzz] pattern.");
            }

            this.RestClient.AddDefaultHeader(key, name + ":" + version);
        }

        private bool isValidName(string name)
        {
            var regex = new Regex(@"^[\w-]{1,50}$");
            return regex.IsMatch(name);
        }

        private bool isValidVersion(string version)
        {
            var regex = new Regex(@"^\d{1,3}(\.\d{1,3}(\.\d{1,3})?)?$");
            return regex.IsMatch(version);
        }

        /// <summary>
        /// Get connection timeout (in milliseconds).
        /// </summary>
        /// <returns> Timeout in milliseconds</returns>
        public int GetTimeout() {
            return this.RestClient.Timeout;
        }

        /// <summary>
        ///  Sets the connect timeout (in milliseconds).
        /// A value of 0 means no timeout, otherwise values must be between 1 and max INT value.
        /// </summary>
        /// <param name="connectionTimeout">connection timeout in milliseconds.</param>
        /// <returns> Api client </returns>
        public ApiClient SetTimeout(int connectionTimeout) {
            // set timeout
            
            RestClient.Timeout = connectionTimeout;
            return this;
        }

        /// <summary>
        /// Gets or sets the RestClient.
        /// </summary>
        /// <value>An instance of the RestClient</value>
        public RestClient RestClient { get; set; }

        /// <summary>
        /// Sets the api base path.
        /// </summary>
        public void SetBasePath(string basePath) {
            this.RestClient.BaseUrl = new Uri(basePath);
        }


        private int _uploadChunkSize = DEFAULT_CHUNK_SIZE;
        
        /// <summary>
        /// Gets or sets the file upload chunk size
        /// </summary>
        public int UploadChunkSize
        {
            get => _uploadChunkSize;
            set { 
                if ((value < MIN_CHUNK_SIZE) && (value > MAX_CHUNK_SIZE))
                {
                    throw new Exception("Invalid chunk size value. Must be greater than " + MIN_CHUNK_SIZE + " bytes and lower than " + MAX_CHUNK_SIZE + " bytes.");
                }
                _uploadChunkSize = value;
            }
        }

        // Creates and sets up a RestRequest prior to a call.
        private RestRequest PrepareRequest(
            string path, RestSharp.Method method, List<KeyValuePair<string, string>> queryParams, Object postBody,
            Dictionary<string, string> headerParams, Dictionary<string, string> formParams,
            Dictionary<string, FileParameter> fileParams, Dictionary<string, string> pathParams,
            string contentType)
        {
            var request = new RestRequest(path, method);

            // add path parameter, if any
            foreach(var param in pathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            // add header parameter, if any
            foreach(var param in headerParams)
                request.AddHeader(param.Key, param.Value);

            // add query parameter, if any
            foreach(var param in queryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // add form parameter, if any
            foreach(var param in formParams)
                request.AddParameter(param.Key, param.Value);

            // add file parameter, if any
            foreach(var param in fileParams)
            {
                request.AddFile(param.Value.Name, param.Value.Writer, param.Value.FileName, param.Value.ContentType);
            }

            if (postBody != null) // http body (model or byte[]) parameter
            {
                request.AddParameter(contentType, postBody, ParameterType.RequestBody);
            }

            return request;
        }

        /// <summary>
        /// Makes the HTTP request (Sync).
        /// </summary>
        /// <param name="path">URL path.</param>
        /// <param name="method">HTTP method.</param>
        /// <param name="queryParams">Query parameters.</param>
        /// <param name="postBody">HTTP body (POST request).</param>
        /// <param name="headerParams">Header parameters.</param>
        /// <param name="formParams">Form parameters.</param>
        /// <param name="fileParams">File parameters.</param>
        /// <param name="pathParams">Path parameters.</param>
        /// <param name="contentType">Content Type of the request</param>
        /// <returns>Object</returns>
        public Object CallApi(
            string path, RestSharp.Method method, List<KeyValuePair<string, string>> queryParams, Object postBody,
            Dictionary<string, string> headerParams, Dictionary<string, string> formParams,
            Dictionary<string, FileParameter> fileParams, Dictionary<string, string> pathParams,
            string contentType)
        {
            var request = PrepareRequest(
                path, method, queryParams, postBody, headerParams, formParams, fileParams,
                pathParams, contentType);

            request = InterceptRequest(request);
            var response = RestClient.Execute(request);
            this.CheckResponse(response);

            return (Object) response;
        }

        /// <summary>
        /// Check if the api call response was successful
        /// </summary>
        /// <param name="response">The response to check</param>
        private void CheckResponse(IRestResponse response)
        {
            if (response.ResponseStatus != ResponseStatus.Completed)
            {
                throw new ApiException((int)response.ResponseStatus, response.ErrorMessage, response.Content);
            }
            if (!((int)response.StatusCode).ToString().StartsWith("2"))
            {
                var exc = JsonConvert.DeserializeObject<ApiExceptionResponse>(response.Content);
                throw new ApiException((int)response.StatusCode, exc.title, response.Content);;
            }
        }

        class ApiExceptionResponse
        {
            public string type;
            public string title;
            public string name;
            public int status;
        }

        /// <summary>
        /// Makes the asynchronous HTTP request.
        /// </summary>
        /// <param name="path">URL path.</param>
        /// <param name="method">HTTP method.</param>
        /// <param name="queryParams">Query parameters.</param>
        /// <param name="postBody">HTTP body (POST request).</param>
        /// <param name="headerParams">Header parameters.</param>
        /// <param name="formParams">Form parameters.</param>
        /// <param name="fileParams">File parameters.</param>
        /// <param name="pathParams">Path parameters.</param>
        /// <param name="contentType">Content type.</param>
        /// <param name="cancellationToken">Cancellation Token.</param>
        /// <returns>The Task instance.</returns>
        public async System.Threading.Tasks.Task<Object> CallApiAsync(
            string path, RestSharp.Method method, List<KeyValuePair<string, string>> queryParams, Object postBody,
            Dictionary<string, string> headerParams, Dictionary<string, string> formParams,
            Dictionary<string, FileParameter> fileParams, Dictionary<string, string> pathParams,
            string contentType, CancellationToken cancellationToken)
        {
            var request = PrepareRequest(
                path, method, queryParams, postBody, headerParams, formParams, fileParams,
                pathParams, contentType);
            request = InterceptRequest(request);
            var response = await RestClient.ExecuteTaskAsync(request, cancellationToken);
            return (Object)response;
        }

        /// <summary>
        /// Escape string (url-encoded).
        /// </summary>
        /// <param name="str">String to be escaped.</param>
        /// <returns>Escaped string.</returns>
        public string EscapeString(string str)
        {
            return UrlEncode(str);
        }

        /// <summary>
        /// Create FileParameter based on Stream.
        /// </summary>
        /// <param name="name">Parameter name.</param>
        /// <param name="stream">Input stream.</param>
        /// <param name="chunkedStream">Chunked byte array.</param>
        /// <returns>FileParameter.</returns>
        public FileParameter ParameterToFile(string name, Stream stream, byte[] chunkedStream = null)
        {
            if (stream is FileStream fileStream)
                return FileParameter.Create(name, chunkedStream ?? ReadAsBytes(stream), Path.GetFileName(fileStream.Name));
            else
                return FileParameter.Create(name, chunkedStream ?? ReadAsBytes(stream), "no_file_name_provided");
        }

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601)
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <returns>Formatted string.</returns>
        public string ParameterToString(object obj)
        {
            if (obj is DateTime dateTime)
                return dateTime.ToString();
            else if (obj is DateTimeOffset dateTimeOffset)
                return dateTimeOffset.ToString();
            else if (obj is bool isTrue)
                return isTrue ? "true" : "false";
            else if (obj is IList list)
            {
                var flattenedString = new StringBuilder();
                foreach (var param in list)
                {
                    if (flattenedString.Length > 0)
                        flattenedString.Append(",");
                    flattenedString.Append(param);
                }
                return flattenedString.ToString();
            }
            else
                return Convert.ToString (obj);
        }

        /// <summary>
        /// Deserialize the JSON string into a proper object.
        /// </summary>
        /// <param name="response">The HTTP response.</param>
        /// <param name="type">Object type.</param>
        /// <returns>Object representation of the JSON string.</returns>
        public object Deserialize(IRestResponse response, Type type)
        {
            IList<Parameter> headers = response.Headers;
            if (type == typeof(byte[])) // return byte array
            {
                return response.RawBytes;
            }

            // TODO: ? if (type.IsAssignableFrom(typeof(Stream)))
            if (type == typeof(Stream))
            {
                if (headers != null)
                {
                    var filePath = Path.GetTempPath();
                    var regex = new Regex(@"Content-Disposition=.*filename=['""]?([^'""\s]+)['""]?$");
                    foreach (var header in headers)
                    {
                        var match = regex.Match(header.ToString());
                        if (match.Success)
                        {
                            string fileName = filePath + SanitizeFilename(match.Groups[1].Value.Replace("\"", "").Replace("'", ""));
                            File.WriteAllBytes(fileName, response.RawBytes);
                            return new FileStream(fileName, FileMode.Open);
                        }
                    }
                }
                var stream = new MemoryStream(response.RawBytes);
                return stream;
            }

            if (type.Name.StartsWith("System.Nullable`1[[System.DateTime")) // return a datetime object
            {
                return DateTime.Parse(response.Content,  null, System.Globalization.DateTimeStyles.RoundtripKind);
            }

            if (type == typeof(string) || type.Name.StartsWith("System.Nullable")) // return primitive type
            {
                return ConvertType(response.Content, type);
            }

            // at this point, it must be a model (json)
            try
            {
                return JsonConvert.DeserializeObject(response.Content, type, serializerSettings);
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }

        /// <summary>
        /// Serialize an input (model) into JSON string
        /// </summary>
        /// <param name="obj">Object.</param>
        /// <returns>JSON string.</returns>
        public string Serialize(object obj)
        {
            try
            {
                return obj != null ? JsonConvert.SerializeObject(obj,serializerSettings) : null;
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }

        /// <summary>
        ///Check if the given MIME is a JSON MIME.
        ///JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public bool IsJsonMime(string mime)
        {
            var jsonRegex = new Regex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$");
            return mime != null && (jsonRegex.IsMatch(mime) || mime.Equals("application/json-patch+json"));
        }

        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public string SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return "application/json";
            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType.ToLower()))
                    return contentType;
            }

            return contentTypes[0]; // use the first content type specified in 'consumes'
        }

        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public string SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;
            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";
            return string.Join(",", accepts);
        }

        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">String to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(text));
        }

        /// <summary>
        /// Dynamically cast the object into target type.
        /// </summary>
        /// <param name="fromObject">Object to be casted</param>
        /// <param name="toObject">Target type</param>
        /// <returns>Casted object</returns>
        public static dynamic ConvertType(dynamic fromObject, Type toObject)
        {
            return Convert.ChangeType(fromObject, toObject);
        }

        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            byte[] byteArray;
            using (var streamReader = new MemoryStream())
            {
                inputStream.CopyTo(streamReader);
                byteArray = streamReader.ToArray();
                return byteArray;
            }
        }

        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">String to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }

            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }

            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;

            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);
                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }

            return sb.ToString();
        }

        /// <summary>
        /// Sanitize filename by removing the path
        /// </summary>
        /// <param name="filename">Filename</param>
        /// <returns>Filename</returns>
        public static string SanitizeFilename(string filename)
        {
            Match match = Regex.Match(filename, @".*[/\\](.*)$");
            if (match.Success)
            {
                return match.Groups[1].Value;
            }
            else
            {
                return filename;
            }
        }

        /// <summary>
        /// Convert params to key/value pairs. 
        /// Use collectionFormat to properly format lists and collections.
        /// </summary>
        /// <param name="collectionFormat">Collection format.</param>
        /// <param name="name">Key name.</param>
        /// <param name="value">Value object.</param>
        /// <returns>A list of KeyValuePairs</returns>
        public IEnumerable<KeyValuePair<string, string>> ParameterToKeyValuePairs(string collectionFormat, string name, object value)
        {
            var parameters = new List<KeyValuePair<string, string>>();
            if (IsCollection(value) && collectionFormat == "multi")
            {
                var valueCollection = value as IEnumerable;
                parameters.AddRange(from object item in valueCollection select new KeyValuePair<string, string>(name, ParameterToString(item)));
            }
            else if (value is IDictionary dict)
            {
                foreach (DictionaryEntry entry in dict)
                {
                    parameters.Add(new KeyValuePair<string, string>(name + "[" + entry.Key + "]", ParameterToString(entry.Value)));
                }
            }
            else
            {
                parameters.Add(new KeyValuePair<string, string>(name, ParameterToString(value)));
            }

            return parameters;
        }

        /// <summary>
        /// Check if generic object is a collection.
        /// </summary>
        /// <param name="value"></param>
        /// <returns>True if object is a collection type</returns>
        private static bool IsCollection(object value)
        {
            return value is IList || value is ICollection;
        }
    }
}